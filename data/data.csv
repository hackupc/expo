Submission Title,Submission Url,Plain Description,Video,Website,File Url,Desired Prizes,Built With,Mlh Points,Mlh Software Lab,Mlh Hardware Lab,Submitter Screen Name,College/Universities Of Team Members,Additional Team Member Count,Team Member 1 Screen Name,...,,
SocialEngineSpeech,http://hackupc2017f.devpost.com/submissions/78550-socialenginespeech,"Inspiration

With so much of web design being visual and blind users having to settle for a second-class experience due to their disability only allowing interaction through screen readers, we thought that we could bring real, considered support for a platform.

What it does

Allows the use of voice commands to interact with the platform, with content being read out to the user.

How we built it

We grabbed the SocialEngine trial product and started playing about with their SDK and database.

Challenges we ran into

The SDK was horrible so we had to rebuild from the database up.

Accomplishments that we're proud of

Managing to incorporate the correct queries for a rather complex database (154 tables!!)

What we learned

The SocialEngine database structure could be more efficient

What's next for SocialEngineSpeech

Keyboard shortcuts for all functions on the platform
",,https://github.com/MaiThi/SocialEngineSpeech,,,"php, node.js, html5, mysql","University of St Andrews, Kiel University of Applied Sciences, Kiel University of Applied Sciences",,,ConnorL__,"Kiel University of Applied Sciences, Kiel University",2,NhutHaiHuynh,MaiThi,,
Ryanscanner,http://hackupc2017f.devpost.com/submissions/78551-ryanscanner,"Inspiration

Travelling around Europe this summer, I noticed it was often cheaper to fly to an intermediate destination and then on again on a low-cost-carrier when the fare direct was often more expensive and on a full service airline.

What it does

In particular, Ryanscanner uses Ryanair's dense point-to-point network, but scans other large LCCs in turn if that doens't yield any results.

How I built it

Using the Skyscanner API (great sponsor), and PHP (sorry).

Challenges I ran into

So it turns out the Skyscanner API isn't friends with Ryanair, although these are displayed on their site, which was disappointing as this is not documented. Ryanair's route structure was a large inspiration for the project. However, the company seems to have a progressive attitude to tech, so hopefully this will be resolved in the future.

Accomplishments that I'm proud of

Working with the Skyscanner API! I've never been the guy on the project dealing with an API this complex and so it was good fun getting to grips with it.

What I learned

I improved my workflow by using Postman for a lot of the testing phases. I decided to do the project in PHP instead of Python as it's a language I've used longer (and I think I appreciated this in the middle of the night..) but next time I'd like to move to Python.

What's next for Ryanscanner

I'd like to match up connecting flights better, and present them in a sorted list. I'd also like to be able to select airports more intelligently, as this would improve loading time.
",,https://github.com/guym4c/ryanscanner,,Skyscanner challenge,php,University of Sussex,,,guym4c,university of sussex,0,,,,
TravelTimmy,http://hackupc2017f.devpost.com/submissions/78552-traveltimmy,"TravelTimmy

All your business trips in your teams' home: Twist.

About

Staying on top of your business trips is pretty hard:


Where did I leave the boarding pass again?
Did I book my flight yet?


TravelTimmy takes the strain out of travelling for business.
Ask Timmy to get you a quote for the flight to your next destination. Rest assured that you get access to the cheapest flights, thanks to the Skyscanner API. 
Like the flight? Book it instantly via their platform and lean back - Timmy takes care of your ticket as well and has it ready when you need it. All of that from the comfort of your favourite communication tool Twist.

Technology

The bot is written in pure Javascript (Node.js). We wrote the whole chatbot ourselves, using only a Finite State Machine and no fancy Chatbot API or helper. We connect to APIs provided by Skyscanner and integrate with Twist by doist.
The bot is hosted in an EC2 instance on AWS, running Node.js behind a NginX proxy that is supported by Let's encrypt.
The domain for our landing page is provided by Domain.com.
",,http://traveltimmy.com/,,"Doist challenge, Best Domain Name from Domain.com, Skyscanner challenge, Amazon Web Services - Best Use of AWS","javascript, twist, skyscanner, chatbot, google, entity-recognition",Hasso Plattner Institute,"Domain.com,Amazon Web Services",,FWirtz,Hasso-Plattner-Institute,2,emanuel-metzenthin,MariusDanner,,
Flying Fishooter,http://hackupc2017f.devpost.com/submissions/78553-flying-fishooter,"Inspiration

There is a game called The archers 2 that allows a high integration between finger gestures and the game. We decided to extend this game to 3 dimensions.

What it does

The player uses swipes to shoot a volley of arrows at flying fishes. The score is dependent on the accuracy of the arrows.

How we built it

This was created using unity game engine and exported using android studio to android devices.

Challenges we ran into

The game contains many interdependent parts which made distributions and collaboration difficult. 
Furthermore we had many, it won't build it won't build events.

Accomplishments that we're proud of

What we learned

Github, and Unity game engine.

What's next for Flying Fishooter

Massively Multiplayer mode many players competing for a limited pool of flying fishes.
",,https://github.com/bakhtiary/3dshooter,https://s3.amazonaws.com/challengepost/zip_files/production/25944/zip_files/3dshooter-master.zip,,unity3d-editor,"Universitat Oberta de Catalunya, Jacobs University Bremen, Jacobs University Bremen, Universitat Politecnica de Cataluña",,,bakhtiary,"Universitat Oberta de Catalunya, Jacobs University Bremen, Universidad Politécnica de Cataluña",3,Alihammza,zulnnorain99,VCoves,
ImaginBot,http://hackupc2017f.devpost.com/submissions/78555-imaginbot,"Inspiration

We wanted to go beyond and not just make a simple bot to send and receive money, but also help us in our day to day life and make life easier.

What it does

Our chatbot allows you to interact with the world in a natural way, just as you would with your personal assistant and facilitating access to services, the services you need when you need them most.
The bridge between you and the information, using only your voice


Restaurants with online letter, order and pay in the same application.
Flights and Travel
Promotions and discounts
Customized offers.
A world without queues (who does not hate queues)
Do you realize the possibilities that we are making available to you? At the reach of your hand.


How we built it

We have used:
Dialog flow to create the entities and train the actions recognizer
Two servers in Python with Flask
Trained a Artifical Intelligence
Sparks of magic

Challenges we ran into

Work without the api, having to invent the data
The api of the dialog flow is poorly documented and has been a little self-learning
Integrate SSL

Accomplishments that we're proud of

In less than 24 hours we have created a bot that works perfectly and provides real and efficient data

What we learned

We have learned how to do a chatbot, using different technologies

What's next for Imaginebot

Who knows, maybe will be the next SkyNet
",https://www.youtube.com/watch?v=euvr4f2FeME,https://github.com/hermesvf/imaginBot,,"imaginBank challenge, Opentrends challenge","flask, node.js, postgresql, python, ssl, hhtps, ssh, ubuntu, digitalocean, google-assistant, api-ai, tonsoflove","UPC, Facultat d'Informàtica de Barcelona",,,alexusgracia,,2,marcbenedi,hhermesvf,,
KOH,http://hackupc2017f.devpost.com/submissions/78557-koh,"Inspiration

We where at the zoo we couldn't get a selfie with the animals so we built a bot to do it for us.

What it does

It takes your face and puts it on another image.

How we built it

We used Microsoft's face detection API to detect the face in the image and place the face onto the new image.

Challenges we ran into

Understanding the Twitter API and being able to detect face's 

Accomplishments that we're proud of

It works

What we learned

How to use the Twitter API and Understanding the Twitter API
",,https://github.com/abdulajet/Koh,,Bloomberg challenge,"node.js, twitter","Birmingham City University, City University of London",,,harshpal,,2,KingNoosh,abdulajet,,
International Wanderer,http://hackupc2017f.devpost.com/submissions/78558-international-wanderer,"Inspiration

Miscommunication in teams can have a serious impact on a groups performance. In a world that is moving towards having decentralised companies, working across borders must be made as easy as possible. 

What it does

It can be used to translate messages in real time, into any language without defining the the source language.

How we built it

We built a Flask API, which we deployed onto a python server. Using web-hooks, we integrated this with Twist to create a slash command with one argument for the selection of translation language.

Challenges we ran into

Setting up google credentials to make OAuth2 requests to google's cloud API.

Accomplishments that we're proud of

Being familiar enough with Twist to quickly deploy new intergrations. As well as creating a tool which we can actually use to develop/work with people remotely. 

What we learned

How to perform OAuth2 requests in Python.
How to use the Flask library, Twist and Google Cloud API's.

What's next for Intellectual Wanderer

Always on personal translation. Each account can be associated with a language. And any foreign languages  are automatically detected and translated to the hosts chosen language.
",,,,"Itequia challenge, Thoughtworks challenge, Doist challenge, Bloomberg challenge, Opentrends challenge","flask, python, bash, sinergy, google-cloud, natural-language-processing, twist, open-tends, itequia, azure",University of Sussex,,,peterjlloyd,university of sussex,2,tenxlenx,pseudogram,,
BankBird,http://hackupc2017f.devpost.com/submissions/78559-bankbird,"Inspiration

The best chatbot for a financial app. We want to automate information and find new bank information for the end user. Help the user find the nearest banks and ATMs.

What it does

Automatically answers (chatbot) on any of most frequently asked questions regarding imaginBank and their service.

How we built it

We have made android application in Java that communicates with machine learning server via api.

Challenges we ran into

Some of most challenging parts were to make bot act like real support person. We had to put many examples of questions and answers. Also, it was tricky to make whole application very smooth-running without lags or hangings while chatting. 

Accomplishments that we're proud of

We have made fully functional and usable application that can help many people right now.

What we learned

We have learned how machine learning and new technology affects everyday people lives. Also, we have learned that is very important to meet new people and ask them for help or help them if needed. The most important thing is to have fun while we do new and helpful applications.

What's next for BankBird

BankBird could evolve to bigger application that could learn from real people working as support. Maybe it will become startup one day.
",,https://bitbucket.org/ivancvitas/hackupc-bankerbot,https://s3.amazonaws.com/challengepost/zip_files/production/25857/zip_files/BankBird_HackUPC2017.zip,imaginBank challenge,"android, java, api.ai, google-places, android-studio",Polytechnic of Zagreb,,,cvitasivan,Polytechnic of Zagreb,1,TomislavBrabec,,,
Crime Me a River,http://hackupc2017f.devpost.com/submissions/78560-crime-me-a-river,"Inspiration

We were inspired by OpenTrends Open Source Your City concept and we wanted to 

What it does

Our ML model predicts the general location of crime hotspots on a particular day of the week. This information could be very useful for a police department seeking to optimise their resource utilisation in order to reduce crimes, and quickly respond to ones that do occur.

How We built it

We build a Neural Network through TensorFlow using over 10 years of training data from the city of San Francisco. The data included the location (LatLng) of the crime, the date & time, day of the week, police district. The model takes input as a day and returns the location where the next crime is most likely to occur. The city was divided using a clustering algorithm into 10 mutually exclusive regions. The output of the model is one of these 10 locations.

Challenges We ran into

We did not have enough time to perfect the Neural Network by tweaking various parameters 

Accomplishments that We're proud of

What We learned

What's next for Crime Me a River

Build ML models for more cities!
",,https://github.com/HackUPCCrew,,"Thoughtworks challenge, Amazon Web Services - Best Use of AWS, Bloomberg challenge, Opentrends challenge","tensorflow, keras, google-maps, javascript","University of Cambridge, UPC, University College Dublin, Warsaw University of Technology",Amazon Web Services,,cathalkilleen,,1,SATYAJITDAS,,,
The Flighter,http://hackupc2017f.devpost.com/submissions/78562-the-flighter,"Inspiration

Our inspiration is based on the fact that we love to travel, but are limited by our budgets as students. With websites such as camelcamelcamel for Amazon, there are a lack of options on the market with regards to flights. We want to provide a service which is easy to use, and more importantly, free to use.

What it does

It is a subscription service, where users have to create an account with preferences such as home location and a list of ideal destinations. Our back-end would query Skyscanner API daily, to try and find good deals for any routes to any of those destinations. If good deals are found, the details would be email-ed to the user to notify them of the deal, with a link to purchasing those tickets.

How we built it

For the front-end, we used bootstrap and Angular.js to improve the functionality of the website. The front-end communicates with the back-end for registering and logging-in of users, using HTTP post to send a command to the back-end to continually query those locations for that user daily.
The back-end is built on Python and Flask, with the server setup via Heroku in a PostgreSQL database. The back-end also implements the travel API to connect to the Skyscanner data, which is parsed in the back-end as well.

Challenges we ran into

Some of the challenges we faced involved a change of plans halfway through the project, as we had to adapt our strategy in order to accomplish our goals. For example, we spent Saturday afternoon trying to learn Django, but found it a challenging process that did not quite meet our needs. Hence, we decided to change to Flask instead, which helped us make up for lost time. There are also issues we faced in the front-end, as we lacked experience using the full features of Angular.js as well.

Accomplishments that we're proud of

This hackathon was a thoroughly enjoyable process, and we are proud that we managed to develop a full-stack application within the 3 of us, given that some of us lacked experience prior in aspects of web app development. However, after the hackathon, we feel that we have learnt a lot and become more confident in taking on tasks in web app development. The main accomplishment we are proud of is how much we have learnt, developing new skills which we can take away for the future.

What we learned

We all agreed that we have managed to come out of our comfort zone to develop in areas which we are not totally familiar with. It was the first time for some of us using common technologies such as Flask and Angular.js, while also learning other intricacies such as smtp in Python. We faced multiple challenges along the way, but overcame them to learn new lessons and also reinforce older concepts.

What's next for The Flighter

We were thinking of incorporating a travel log/blog function for users by linking it with their skyscanner account, and logging their travel history. This could be done with a visualisation via a map of the world, with the places the users have visited highlighted. We also plan to implement a moving average calculation and better algorithm for determining the threshold of a good deal, to notify the user.
",,http://goransjawdat.000webhostapp.com,https://s3.amazonaws.com/challengepost/zip_files/production/25887/zip_files/aroundTheWorldIn80Years.zip,"Skyscanner challenge, Bloomberg challenge","flask, skyscanner, angular.js, python, heroku, npm, postgresql, travel-api, bootstrap","Imperial College London (x2), Bahcesehir University",,,Zfegd,", Imperial College London",2,Goran216,lowbicheng,,
NapBoard,http://hackupc2017f.devpost.com/submissions/78564-napboard,"We came up with the idea of developing an OCR when we heard Itequia could help us building such an incredible project. 

NapBoard helps you by taking the text of any type of image file format and printing it while maintains the order and the size of the line texts.

We developed the project coding in javaScript and html so we could upload it as a website.

No member of the team had ever code in javaScript nor html, so we had to find how these languages worked or the proper way to implement the diferents algorythms in internet.

We are proud to say we have succed in uploading a functional webpage.

As a group we have learned a lot about the steps we must follow to create a website. 

NapBoard thinks its future is brilliant as it makes huge leaps in the world of Optycal Character Recognition by innoving every day. NapBoard will include a Translate Option in a not too distant future.
",,http://napteam.000webhostapp.com/,https://s3.amazonaws.com/challengepost/zip_files/production/25858/zip_files/NapBoard.zip,Itequia challenge,"html, javascript, css",UPC,Domain.com,,Peies,,3,maxdoblas,davidpujol04,RogerFabre,
Whiteboard OCR,http://hackupc2017f.devpost.com/submissions/78578-whiteboard-ocr,"Inspiration

The Etiquia company needed some way to save their whiteboards on their electronic devices. This is why they offered the challenge to make one.

What it does

You send a picture from the web, either from URL or your PC, and the application generates an page, formatted the same way as your whiteboard : Font size, and text position.

How we built it

We used React to build the web interface, react-native for the mobile one, and Firebase for the database and storage.

Challenges we ran into

We had difficulties with sending binaries to the Microsoft vision API on the web, so we have finally choose to host ourselves the pictures on firebase. We also struggled with the file system on react-native as it does not natively support it, and various packages conflicts that took way too much time to fix.

Accomplishments that we're proud of

What we learned

We had the chance to learn the Microsoft OCR API, how to avoid some react-native caveats during setup, and blob/files/buffers in javascript. This was also the chance to strenghten our React skills.

What's next for Whiteboard OCR

The first draft of the mobile app is almost complete to take photo, upload them on firebase and then generate the JSON for the front-end to display.
We also thought of a github integration : automatically fill your project columns with cards if you respect a specific format on the whiteboard.
",,https://github.com/Unicode-hackUPC,https://s3.amazonaws.com/challengepost/zip_files/production/25859/zip_files/EquitiaOCR-web.zip,Itequia challenge,"react, react-native, javascript","Jean jaures Toulouse 2, INSA toulouse",,,flotos,"Jean jaures, INSA Toulouse",1,DarkLicornor,,,
CypherEstate,http://hackupc2017f.devpost.com/submissions/78586-cypherestate,"CypherEstate

What is CypherEstate?


CypherEstate is a decentralized blogging site based on IPFS. Users can create their own personal blog, free of charge, and post anything they have in mind. No censorship, no moderation. Neither CypherEstate nor government agencies can remove what has been posted on the platform.


Why CypherEstate?


The rise of the internet marked the start of the information era. Emphasis on information. We believe anyone should be free to express their ideas, regardless of their point of view. Traditional journaling sites are becoming increasingly restrictive, submitting to political and corporate pressure.


What did we learn?


We learned how to implement a decentralized application from the bottom up. This involved not only creating the whole IPFS wrapper for Python around the blogging system, but also creating a user-oriented website, accessible to all levels of expertise. We all learned a little bit of everything in the process, but most of all, we learned about teamwork. Working in a bigger group than we usually do, we had to distribute our tasks appropriately so we all had something to work on at all times.


What is our final assessment?


We are very satisfied with our final result, and we found the whole experience extremely fulfilling. We definitely believe that we pushed our limits during this edition of the HackUPC.

",,http://178.62.60.142/,,Everis challenge,"python, flask, html5, javascript, css3, markdown, ipfs, mako, sqlite, blockchain, ethereum, digitalocean",UPC,Domain.com,,Ocuatrec,UPC,2,EricAlcaide,PolBaladas,,
Twist for Alexa,http://hackupc2017f.devpost.com/submissions/78587-twist-for-alexa,"Inspiration

I was really interested in the Doist challenge as I use Todoist to manage my tasks. I really liked the look of Twist, but was struggling to think of a useful hack to create with it. I brought my Echo Dot with me incase I wanted to use it. And then I realised I should create a skill for Twist!

What it does

Twist for Alexa allows you to get the contents of your inbox in any workspace. You can say ""Ask Twist what's in my inbox"" and ""Ask Twist to change my workspace to [workspace name]"".

How I built it

The skill is built with NodeJS and hosted on AWS Lambda. I used a helpful library called alexa-app which helped me to set up the intents in a straight forward way.

Challenges I ran into

I found it hard to get the skill on my Echo Dot to start testing. While I was able to use a library called alexa-skill-test to test on my local machine, it didn't allow for speech or utterances, and it timed out after three seconds (I think I'm going to PR their repo and create a way to change the timeout).

It was also difficult to get it to recognise workspace names. For example I had one called ""sussex_hack_upc"": the first challenge was matching what was is said to that, this included removing spaces, punctuation, changing case. The bigger challenge was getting Alexa to understand an abbreviation like UPC. In the end I created a custom slot type and gave it examples.

Accomplishments that I'm proud of

I've never written an Alexa skill before! This is also the first hack that I've created by myself. I'm proud of both of those.

What I learned

I learned that the developer experience for Alexa skills has a fairly steep learning curve. I most enjoyed learning about the design of an Alexa skill: intents, slots, utterances, etc. I'd love to create more in future.

What's next for Twist for Alexa

I'm planning to make this code open source and actually publish this skill so that anyone can use it! This will require me to make the OAuth integration dynamic, clean the code up & write documentation.
",https://www.youtube.com/watch?v=TqVoEf9me4k,https://github.com/elliotmassen/Alexa-Twist,https://s3.amazonaws.com/challengepost/zip_files/production/25860/zip_files/twist-for-alexa.zip,"Doist challenge, Amazon Web Services - Best Use of AWS, Bloomberg challenge","node.js, alexa, lambda",University of Sussex,,,elliotmassen,,0,,,,
Fly Team,http://hackupc2017f.devpost.com/submissions/78592-fly-team,"Building something more than just a toy controlled by joystick. We wanted to  build a drone, as a station for sensors, which could come as close as possible to an intuitive flying experience. So we built a “Hawk” which has capabilities to hold multiple sensors, including a video camera and is controlled by gloves equipped with flexometer and accelerometer to form an intuitive gesture controlled flying experience. But it goes beyond this, we wanted our drone to be more than a pleasing toy, we built into it a sensor station which communicates with a remote IoT platform, the data collected by the sensors is communicated through an interactive API called Ubidots. 
The development procedure was filed with difficulties both at the hardware and the software level. One of the major challenge was lack of WiFi shields which created many problems for communication between different parts of the project. And we came up with an ingenious solution of using another development board which was equipped with an embedded  wifi shield in serial with our Arduino Nano, but it was not as straight forward as it seemed in the beginning, the communication between the boards was very slow and we had to decrease the amount of data in communication. we also had many difficulties in putting together different components of the drone and making them communicate with each other and behave as one system. Also, none of the team members had any experience in any front end development. Hence,  communicating with Ubidots API was quite a challenge in itself. 
The entire ecosystem in HackUPC helped us think of our project in a wider spectrum and we realize that such a drone based sensor station can serve in many industrial and social applications. We look forward to keep working on our project with better and more optimized hardware and making it a complete solution.
",,,,Opentrends challenge,"ubidots, arduino, wemos-d1","UPC, University of Trento",,,SimoneRattenni,"University of Trento, VGTU",3,SagarMalhotra,DanielKlioc,DaniCebrian,
Shop Framework,http://hackupc2017f.devpost.com/submissions/78593-shop-framework,"The JCR (student union) of my college at Oxford runs a shop which contains things like sweets and sanitary goods, which is convenient since the nearest real corner shop is probably about 500m away, and we will be using this software to operate the shop.

The program does pretty much the standard expected functions that any point of sale software should. You can prepare orders, store purchases by customers, and review past orders. The shop operates on credit, so we keep a list of authorized customers in order to keep track of debt. Most POS software keeps track of inventory, but we decided this was a waste of time since it's really not a very formally run shop.

The point of sale software we'd previously been using to run the shop is called Imonggo, which generally works alright, but exporting completed sales is a relatively highly priced premium feature. The two possible solutions we came up with were scraping the web client, or just writing something custom, and I've gone for the second alternative.

This project is written in PHP and JS. Of course, standard PHP probably isn't the cleanest language available, but I've found it's pretty handy for relatively simple projects like this one.
",,https://github.com/wzwright/JCRShop,,,"php, javascript",University of Oxford,,,wzwright,,0,,,,
Crowdio,http://hackupc2017f.devpost.com/submissions/78594-crowdio,"Inspiration

Before the hackathon, while exploring the beautiful streets of sunny Barcelona, our team was fortunate to stumble upon a number of impressive street performers, from musicians of various exotic instruments to amazing aerobic shows. Coming from smaller and relatively less-exciting cities, the vibrant street life proved to be a huge addition to the overall experience of our journey. We were actually surprised that there was no apparent way to see and locate performances of interest - this lead to 

What it does

Crowdio is a collaborative platform for exploring interesting street events across the local city. It enables users to view their nearby area for events based on category that may be of interest, as well as add new performances whenever an interesting performer is stumbled upon. The app is something that we wished we had as seeing more once-in-a-lifetime performances would have our trip to Barcelona that much more exciting.

Crowdio is beneficial for both: performers, as they get an opportunity to attract more observers and popularity to their shows, and everyday spectators/tourists who may be looking for shows, or who may just be passing by.

How we built it

Crowdie was built primarily for Android, with a light Flask back-end to hold the state, and Firebase Cloud Messages for pushing notifications about events nearby, plus AWS and Google Maps.

Challenges we ran into

Having limited Android experience was the primary challenge (only a single person with previous experience), however our team was open to getting our hands dirty with a new technology. 

Accomplishments that we're proud of

We're happy to have a working prototype that can realistically be used in the city right now, and we are happy that each team member made substantial contribution to the codebase.

What we learned

We learned a lot about the Android development process, as well as Flask application deployment and AWS security groups.

What's next for Crowdio

Polish up the functionality, add some nice Facebook integration for tracking seen events, and add more customisation options in terms of performance categories, notification range and profiles.
",,https://github.com/jjurm/crowdio,,"Thoughtworks challenge, Bloomberg challenge","android, flask, fcm",University of Glasgow,,,domantasjurkus,"University of Glasgow, Vilnius University of Applied Science",2,Vytautas,jjurm,,
AgileSmartParking,http://hackupc2017f.devpost.com/submissions/78596-agilesmartparking,"HACKUPC2017

AgileSmartParking

Agile Smart Parking is a webapp bringing all the Open Source Rapid Prototyping Agile Tech around the world to bring the best parking experience in a SMART CITY with CONNECTED CARS.

Project done at HackUPC fall 2017, 36 hours of hacking.

How it works

We are using Thinktia.cloud and Sentilo to create and manage all our components and sensors. Using a JavaScript and cURL to connect to the API. For the interactive map we have opted for open source option like Leaflet and OpenStreetMap API, with Leaflet Routing Machine aswell.

How it looks



We have different markers for differents components. Blue for our car, Green for free slots and red for occupied slots.



We also have implemented a way to get the closest free slot and get the shortest path with indications. To activate and desactivate the route indications we just need on click the car icon at the top left of the screen.

Future Implementations

Especially builded for being scalable. In this case we have created our own virtual sensors but we will contemplate reusing this app and this API in case new sensors appears.
",,https://github.com/marcigarza/AgileSmartParking,https://s3.amazonaws.com/challengepost/zip_files/production/25861/zip_files/AgileSmartParking.zip,Opentrends challenge,"javascript, css, shell, html, apacheconf",FIB,,,marcigarza,"FIB, UPC",1,danielgomezbellido,,,
feelpad,http://hackupc2017f.devpost.com/submissions/78597-feelpad,"Feelpad

Feelpad is text

Write markdown on the left, see the preview on the right. No more github screwups. What's more, you can save the result as a pdf. Smart for sharing a markdown doc with the non-tech people outside of our bubble :P

Feelpad is feelings

Don't waste time on stupid negative news. Just copy and paste the article in feelpad, and if it's grey and the emoji is bad, don't even bother reading it. You'll feel better reading less about terrorists and Trump, I promise :*)

The text sentiment polarity is analyzed and classified in one of 5 emotions:


amazing
positive
neutral
negative
awful


Then, a rotating emoji is rendered according to the overall sentiment of the text, and the background color of the rendered markdown changes accordingly. The more red, the better. The more grey, the worse the emotions of the text are.

Technical blablabla

There is a frontend client made in React and ES6 that uses functional stateless components as much as possible, and the backend is a Python microservice made with Flask, which I tried to make as simple as possible. For sentiment analysis, the package TextBlob is used alongside a mapper of sentiment number from -1 to 1 from TextBlob to one of the 5 previous sentiments.

Some sort of a conclusion

It might not be the most focused nor the best project, but it was a nice adventure.
",,https://github.com/jxub/feelpad,https://s3.amazonaws.com/challengepost/zip_files/production/25862/zip_files/feelpad.zip,Bloomberg challenge,"javascript, html, css, python",Universidad Politécnica de Valencia,,,jxub,universidad politécnica de valencia,0,,,,
Aruki,http://hackupc2017f.devpost.com/submissions/78599-aruki,"Inspiration

Creating a huge and accessible database for smart-cities is a must nowadays. Optimization of city traffic is one of the main topics to address since its directly related to contamination and city life standards. In addition, this sensor also has a huge potential in the world of smart parking lots, where it can provide real time information about parking in the city. The information obtained can be of use by particulars (parking spots, mean parking times, best times to find parking) or town halls (optimization of traffic, optimization of parking slots, parking meters).

What it does

With the use of an Arduino and several ultrasonic range finder sensors, we obtain data and process to count the flow of pedestrians crossing. In addition, it can also be implemented to control traffic flow and gather information about it. Then, by using an heuristic function, we minimize the queues formed (waiting times) by controlling the light traffic cycles. With Python we connect the Arduino via Bluetooth/USB to upload the data to the Thingtia API so that later we can process the information record (to optimize hour by hour). 

How we built it

The Hardware consists mainly of 6 ultrasonic range finders that have their own microprocessor. With this microprocessor and some Arduino code we can easily send an ultrasonic pulse from the sensor and, via the ultrasonic echo, measure the distance between the sensor and any object. With this distance and some processing on the Arduino we can detect changes in the distance that are produced by objects or people passing through.

The heuristic function has been made with a simple model and we have checked that it behaves as expected. Note that this is just a prove of concept design and the heuristic function must be worked on since it is too simple (we take only quadratic polynomials and only one intersection is taken into account). In addition, to simulate the flows we have defined Poisson distributions around some estimated values to see if the behavior was correct. 

Regarding the connection with the computer has been made remotely via Bluetooth using the ""serial"" module in python.

Finally, the uploading of our data has been made via bash to the Thingtia API.

Challenges we ran into

We have had several difficulties, most of which we were able to overcome. At first the uploading of data to the API was a little bit confusing. Also, we had some troubles connecting the Arduino to the computer. Furthermore the connection via Bluetooth with Arduino was really complicated due to hardware issues with the Bluetooth adaptor module. 

Accomplishments that we're proud of

Making use of several sources to achieve a common goal: hardware and software. We think that with further work and more time our idea could be implemented to have a better way of regulating traffic lights in a simple and cheap way (range finders are cheap and easy to use). Also we are proud to offer a working prototype that is capable of registering people flow as a function of time.

What we learned

We have learned the cURL protocols to upload or download data from Thingtia API. In addition, we have used bash in Python environment and programmed in Arduino.

What's next for Aruki

Automation of data uploading as a stream.
Implementation of the same infrastructure to track parking spots in a determined location to optimize parking. We could easily detect heavy parking dependent zones and mean parking times so that town halls have a way to make better decisions.
",,https://github.com/Wellinstein/HackUPCFall17,,"Thoughtworks challenge, Everis challenge, Opentrends challenge","arduino, python, bash, sensors, c",UAB,,,davidmasip,"UAB, Universidad autonoma Barcelona",2,leonardogastongonzalez,cristinanvsnt,,
Flight Advisor,http://hackupc2017f.devpost.com/submissions/78600-flight-advisor,"Inspiration

Inpired by ImaginBank and Skyscanner challenges, we decided that creating a piggy bank that allows us to collect funds that will be destinated to travel was an interesting approach. To make the task easier, the process is done by a Bot empowered with NLP (Luis AI) that maximices the understanding capability of the ChatBot.

What it does

Flight advisor mainly allows you to:


Manage your piggy bank with operations such as check current money, ingress money.
Buy a flight ticket


How we built it

We have created this chatbot with microsoft bot framework for the bot itself, node.js to manage skyscanner API calls and process them to facilitate Bot's data.
To make the bot ""smarter"" and allow the user to go faster throught the process we allow the user to be able to have a normal conversation with the bot and we'll just detect which fields are filled during the conversation process. This is done thanks to Luis.ai and the training process that we've done.
To make appear images in the cards, we've done API calls to flickr to take out images related with the country we were interested in.
All this application is built in a heroku.

Challenges we ran into


Creating a bot from scratch
NLP in a chatbot
Dealing with Skyscanner and Flickr APIs


Accomplishments that we're proud of

Successfully delivering a chatbot in a short amount of time.

What's next for Flight Advisor

Flight advisor is just a use case of what ImagineBank can do with a chatbot, this application could be extended by adding more functionalities or simply by improving the ChatBot experience.

Built With
node.js
microsoft-bot-framework
luis.ai
heroku
javascript
skyscanner
flickr
",,https://github.com/FlightAdvisorBot/bot,,"imaginBank challenge, Skyscanner challenge","node.js, microsoft-bot-framework, luis.ai, heroku, javascript, skyscanner, flickr",Polytechnic University of Catalonia,,,CristianPQ,"Universidad Politécnica de Cataluña, Universitat Politecnica de Catalunya",3,RMeyerhofer,Reynau,sufian22,
Alda,http://hackupc2017f.devpost.com/submissions/78602-alda,"Inspiration

We thought that imagineBanks chatbot is not engaged enough with the user, so we tried to make a more personal financial chatbot, which helps you analyse your spendings.

What it does

Alda lets you analyse your spendings with deep insight, like asking how much did you spend on uber, or what subscriptions do you currently have and also provide education in finance: explaining financial expressions to you.

How we built it

We built the chatbot using Amazon Lex. We connected it with our backend through AWS Lambda, so the logic is connected to the chatbot. Then for user interaction, we connected the chatbot to a Facebook page.

Challenges we ran into

We spent some time on inventing query types on the transactions and the other bigger challenge was connecting the chatbot to the Facebook messenger platform.

Accomplishments that we're proud of

We are happy that we managed to create a working product, that is very useful and with huge complementary potential to the imaginBank chatbot.

What we learned

We learned how to connect AWS chatbot to Facebook platform, how to manage intents in AWS Lex and got a deeper insight into the types of transactions happening in our account.

What's next for Alda, the financial chatbot

Next steps are adding new querying features and a smart investment option to Alda, so it will be your one and only best financial assistant.
",,,,"imaginBank challenge, Amazon Web Services - Best Use of AWS","amazon-web-services, lex, python, flask, lambda, docker","University of Birmingham, Imperial College London",,,barabasicsongor,Universitat Ramon Llull,1,bielrv,,,
QuickEurope,http://hackupc2017f.devpost.com/submissions/78604-quickeurope,"Inspiration

One of our team members experienced the Interrail journey this summer. We thought that it was a great idea to visit many places in one single vacation. But we thought that we could improve upon this idea by using one of the fastest means of travel known to man: the airplane. Therefore, we decided to increase mobility between large cities by constructing an AI that could bring every user to every place in Europe that they decide with airplanes in the cheapest way possible.

What it does

Users can type up to 4 locations in Europe that they want to travel to and how many days they want to spend in each of them, as well as in which dates will their journey begin and end. Using this input, we give them the cheapest combination of flights that passes through all of these locations in the given days.

How we built it

This project integrates a data-related component, built in Python, which is provided by the SkyScanner API in the form of flight prices and destinations, and an algorithmic core built in C++ which uses this data to compute which will be the optimal set of flights that the user has to take using algorithms such as dynamic programming and segment trees. Furthermore, we wrap this up in an intuitive user experience, built in Flask, so that every user can suit the application to their needs.

Challenges we ran into

The very first challenge we ran up with was to map our general question into a specific algorithm that a computer could solve. After we got the idea which would let us complete the algorithm, what was left was the implementation, which presented us with other challenges. The first one and most obvious was to deal with a completely new API to us, but after we figured out how to query the information we needed, and since we already built the algorithm, it was time to present this in a user-friendly environment. We decided to go for a simple website that would include all the information necessary and would keep clutter to a minimum and simplicity to a maximum.

Accomplishments that we're proud of

First of all, the fact that we managed to complete a challenge with immediate real-world applications in under 36 hours without being professional coders is an achievement in itself, and more so considering that it's our first time ever competing in a hackathon. We're also happy to be allowed to tinker with external APIs, developed by professional companies and being able to use them to come up with results.

What we learned

The most fundamental values that we learned in this competition are not those of programming, but those of team building (which have a direct implication in using GitHub, as a side note). Besides that, we have learned how to use Flask from scratch to build a website and how to use multithreading to speed up queries over the Internet.

What's next for QuickEurope

A nice improvement we could add to our application (actually, on the way of adding) is a map that shows you the destinations and the flights you will be taking. This idea can also be extended to use a map to select which cities will the user want to visit. Another feature would be to refine the queries that the user can ask, such as adding support for maximum days he wants to stay at a certain place, or wanting to be in a certain place at a specific date (such as if he wanted to attend an event that is being held at a specific date) or only considering flights from certain airlines. Another idea would be to also tell the user which places should he visit in that city or where should he stay, or the best way to visit a country, to provide a more comprehensive outlook on the trip and allow for maximum optimality potential.
",,https://github.com/OneStone2/HackUPC,https://s3.amazonaws.com/challengepost/zip_files/production/25864/zip_files/HackUPCTeam7.3.zip,"Skyscanner challenge, Bloomberg challenge, Opentrends challenge","python, api, c++, css, html5, bootstrap, make, makefile, web, flask, images, dp, devpost, github, git, multithreading, json, javascript","UPC, UPC, UPC",,,OneStone2,UPC Barcelona Tech,2,Leixb,victoradell,,
Skyscanner: Display Advertising using Arduino Mega,http://hackupc2017f.devpost.com/submissions/78607-skyscanner-display-advertising-using-arduino-mega,"Inspiration

Instead of searching we just like being offered a spontaneous trips. This is how we came up with the idea of a display, showing the cheapest Friday-Sunday flights. 

What it does

The hardware is Arduino Mega and LCD display. It shows the running words: 'Scyscanner: Cheapest weekend getaway! Flights to [city] from [price] Eur"". 

How we built it

The price and city are fetched by a program written in Python using Skyscanner's API. Communication between Arduino and the PC is through USB connection. 

Challenges we ran into

We both are hardware oriented and learning Python was new for both of us. We are used to low-level programming and doing a project in a higher level was challenging and exciting.

Accomplishments that we're proud of

We learned to use Scyscanner API, Python, Arduino. Quite proud that our idea is working.

What's next for Scyscanner: Display Advertising using Arduino Mega

The LCD display can be changed to e-paper display, showing booking QR codes, so people could book it spontaneously on the spot. Also a wireless communication such as Wi-Fi or GSM module can be easily added.
",,https://github.com/tadasjusk/Skyscanner-Display-Advertising-Using-Arduino-,,Skyscanner challenge,"arduino, mega, python, api, http-requests",Vilnius Gediminas Technical University,,Arduino 101,edmundasmolis,Vilnius Gediminas Technical University,1,TadasJusk,,,
TextIT,http://hackupc2017f.devpost.com/submissions/78610-textit,"TextIT

The idea for this project is recognizing handwritten text in images and producing a txt plain text output with one particular restriction: keep the text positions on the same place.

For the backend we used Python and Flask. To carry out the handwritten text recognition we used the Microsoft Azure Computer Vision API.

As neither of us had much experience with frontend, we decided to use a Twist integration as the interface for our app. To do so, we created a oAuth2 integration with REST hooks as listeners.

Implementation

The data flow starts in the Twist app. From there, we can send the image we want to extract text from. The image is received in our backend Flask server, where it is processed.

The image is sent through the MS Computer Vision API, which extracts words and their corresponding bounding boxes (in image coordinates). With this information we need to generate the plaintext file. To do so, we discretize the image coordinates in a grid, which will then be translated to a text file (each cell is a character). The tricky part here is to make a good choice for the cells width and height, since this will directly affect the separation between words. A low value leads to a high separation, since more lines fit in the same amount of space. On the contrary, a high value leads to a low separation, potentially generating collisions between words.

Once the grid has been filled up with the information returned from the API call, we generate the plaintext file. This file is then uploaded to Twist through an API call. Finally, another Twist API call sends the file url as an attachment to the same thread that initiated the interaction.
",,https://github.com/oscmansan/TextIT,,"Itequia challenge, Doist challenge","python, flask, microsoft-computer-vision-api, twist-api",Universitat Politècnica de Catalunya,,,oscmansan,Technical University of Catalonia,0,,,,
HackMatch,http://hackupc2017f.devpost.com/submissions/78611-hackmatch,"HackMatch

Find your teammate for a hackathon

This app will allow you to show your technologies, hackathon interest and experience. You can use this to find teammates who you think you will work well with, or to just chat about your passions and your ideas. It uses a fun, gamified approach to allow you to build your team in advance, meet great, technologically-minded people and have a much better experience at hackathons.

This was done in C#, using Xamarin, for Android.

Built during HackUPC 2017
",,https://github.com/gyevnarb/HackMatch,https://s3.amazonaws.com/challengepost/zip_files/production/25949/zip_files/HackMatch-master%282%29.zip,,"c#, android, xamarin",University of Edinburgh,,,gwionlly,,2,gyevnarb,Murto,,
Augmented Realiy Game,http://hackupc2017f.devpost.com/submissions/78614-augmented-realiy-game,"Inspiration

Some augmented reality games like Invizimals, Pokemon Go and others.

What it does

The game consists of a battle between two players, who have 3 different units to use.
The game recognises the target images and renders 3D models on them.
Players can choose which unit's attack and which unit they attack.
It also keeps track of each player's turn, which units are still alive, and who achieves the victory.

How we built it

We used Unity and Vuforia (a platform that helps creating AR games). 

Challenges we ran into

During all the development we found a lot of errors we had to fix.
We also couldn't build our project because we ran into errors about wrong Android tools versions, etc.

Accomplishments that we're proud of

We achieved to make a very simple, yet functional game.

What we learned

A lot of different aspects of Unity and Vuforia. Some things about organitzation and preparation.

What's next for Augmented Realiy Game

We would like to add more features to the game (like we initially intended), make it more interesting and fun to play.
",,,,,"unity, c#, visual-studio, android",UPC ENTI,,,AdriaB-Enti,ENTI,0,,,,
GymkhApp,http://hackupc2017f.devpost.com/submissions/78615-gymkhapp,"Inspiration

What it does

Our App consists in a gymkhana - challenge organize based on your location. You can create challenges and beat your friends while discovering the city where you are.

How we built it

The frontend is based in HTML, CSS and Coffeescript, and the backend in Ruby-on-rails. We transformed coffee into code. 

Challenges we ran into

We didn't know anything about HTML, CSS and Coffeescript and we had to improvise to look for solutions while we were getting our project forward and were learning the different languages we've used. Also, we have used the API from FOURSQUARE which was completely new for us. 

Accomplishments that we're proud of

As we have just said, we have had to do a lot of research and to learn so many things during this two days. For us, achieving the goal of presenting a real project has gone far beyond our previous expectations, and because of that we are very happy and proud of ourselves.

What we learned

We have learned that with the right mentality and with a little  bit of help we are able of developing an actual project in much less time that we expected. We are also now better programmers, especially in the area of web developing, a field with millions of opportunities that young technological people as us have to form part of.

What's next for GymkhApp
",,https://pepinillos.scalingo.io,,Best Domain Name from Domain.com,"html, css, coffeescript, ruby-on-rails, api, foursquare",Universidad Autónoma de Madrid,Domain.com,,baque27,"Universidad Autonoma de Madrid, UAM",3,Lletfrix,knifecake,seryi27,
XYSynth,http://hackupc2017f.devpost.com/submissions/78616-xysynth,"XYSynth

Instalation


Install MAX6.
[optiona] Plug in a wacom tablet and map the 4 keys to q, w, e and rrespectively.


Usage


Open the hackupc.maxpat file in Max6, click the speaker (at the bottom) to enable sound and double click the synth XY box.


Short Story

We wanted to learn how to use Max and we thought a synth using the tablet would be fun so we did it. We had great trouble getting the pressure attributes and finally did not use the pressure at all, so th eplan was an XYZ Synth but the bright side is we still have a fun XY Synth. It was fun.
",,https://github.com/udrichale/XYSynth,https://s3.amazonaws.com/challengepost/zip_files/production/25868/zip_files/XYSynth-master.zip,,"max, gimp","UPC, ESMUC",,,Rudolf,"UPC, Escola Superior de Musica de Catalunya (ESMUC)",1,udrichale,,,
streaming-cluster-example-application,http://hackupc2017f.devpost.com/submissions/78618-streaming-cluster-example-application,"Inspiration

Inspiration for this project mainly is the FLINKFORWARD conference we attended this year. We are very interrested in streaming applications and distributed stream processing pipelines.

What it does

This project is more of an example what one could do with such a streaming pipeline. Right now all it does is count the processed events per a given window size. Because we also were interested in learning GO, we build a Go client which connects to the twitter streaming API and fetches tweets which mention a given topic. Those tweets are published to a Kafka cluster and then consumed by the simple flinkjob which does the processing.

How We built it


Go client to fetch tweets and publish them to kafka
Kafka Cluster on AWS with 3 Nodes
Flink master on AWS (1 Node, could scale for bigger processing if needed)
Flink Job (Can run on local machine or flink node)


Challenges We ran into

Practically everything regarding the setup of the cluster. AWS was a pain at first. The Kafka cluster didnt do what we wanted. And sadly we also didnt manage to add ElasticSearch with Kibana to show a little dashboard of the Streaming results :(

Accomplishments that We are proud of

Even though the programming part was quite small, we are proud to have a small cluster for simple streaming apllications.

What We learned

A little Go, getting started with AWS, Kafka, Flink

What's next for streaming-cluster-example-application

One could build more flink processing jobs.. but the AWS Credit will run out quite quickly so the cluster will be gone then.
",,https://github.com/rgo3/twitter-flink-job,,Amazon Web Services - Best Use of AWS,"go, twitter, scala, kafka, flink",Technische Universität Berlin,Amazon Web Services,,rgo3,"TU Berlin, Technische Universität Berlin",2,dergoegge,matthiasseiler,,
NotARealAlexa,http://hackupc2017f.devpost.com/submissions/78619-notarealalexa,"Inspiration

We always wanted to take our knowledge in terms of Echoes further and we thought this was the perfect opportunity. Basically, we built the ultimate chatbot that everyone would love to have but are too lazy to program for themselves. The small number of currently available skills makes it perfect for playing and developing much more powerful applications.

What it does

At the moment, the tasks given to her are quite basic: ""tell me that, that and that"" but, eventually, we will take her to another level by improving her skills using the deep neural network.

How we built it

This was the real challenge since we had no hardware from the lab and we could not test it until we developed an implementation of the actual Echo.

Challenges we ran into

First of all, as the principal developer in JS, I (Andrei) was really shocked to find out that AWS and TTY are incompatible due to synchronicity and that was actually the biggest challenge we found: pivoting the whole body of our program at 5am. Other challenges were relatively small and barely noticeable.

Accomplishments that we're proud of

In my case (Andrei) it was the first time I combined ML with JS and the result was quite surprising.

What we learned

Node and AWS don't work good...

What's next for NotARealAlexa

More skills
",,https://github.com/AndreiTuta/hackupc2017f,,"imaginBank challenge, Everis challenge, Amazon Web Services - Best Use of AWS, Bloomberg challenge","python, javascript, json, amazon-web-services, hardware, alexa, echo, java, machine-learning, scipy, numpy, sklearn","Birmingham City University, University of Zagreb",Amazon Web Services,,andreituta,,1,IbrahimHadzic,,,
CodeHump,http://hackupc2017f.devpost.com/submissions/78622-codehump,"Inspiration

We were bored to share our code via whats app, and it was annoying to login in platforms like, pastebin, bitbucket, github, stackoverflow, ... because there're many steps to handle a single script.

What it does

store and manage code

How we built it

We built it with Go, with not too many problems

Challenges we ran into

Frontend development for backend developers, newbies in Go, not sleeping, ...

Accomplishments that we're proud of

to Josephspurrie his way to develop a framework with Go was so clean and n-layer
link

What we learned

we learn to program more in Go

What's next for CodeHump

reclute more coders that love the minimalistic and quickest uploader codes

PS

to use CodeHump, you must download the gowebapp to run it
",,http://207.154.255.97:8080,https://s3.amazonaws.com/challengepost/zip_files/production/25869/zip_files/codecode.zip,,"go, javascript, html5, css3, ajax, bolt",UAB and UPC,,,bighelmet7,"upc-fib, Universidad Autonoma de Barcelona",1,edgarfr,,,
SkyChat,http://hackupc2017f.devpost.com/submissions/78623-skychat,"SkyChat

SkyChat is a chatbot that allows you to find the best flights offered by Skyscanner. In an esay and useful way using Facebook Messenger.

Facebook page: https://www.facebook.com/SkyChat-921492091334357/

Developed during HackUPC in Barcelona 2017. 

Tools used


Skyscanner's API: https://skyscanner.github.io/slate/
Facebook's API: https://developers.facebook.com/
Heroku: https://www.heroku.com/


Sample Utterances

For a more detailed view of all allowed commands and variations in wording for these commands, view the usageSamples.txt

Future Goals / TODO


Implement the same for:


Cars
Hotels

Make the chatbot more interactive
Make the chatbot more intelligent
Add some features like: make recommendations about the place you are going to visit, etc.

",,https://github.com/jaumefib/SkyChat_HackUPCf2017,,"imaginBank challenge, Skyscanner challenge","javascript, html, node.js, heroku, facebook-chat, skyscanner",Universitat Politècnica de Catalunya,,,Jaume,,2,dmartmilln,masedo,,
CRCoin,http://hackupc2017f.devpost.com/submissions/78624-crcoin,"Inspiration

We are a group of Computer Science Engineering students who, driven by an individual challenge that we proposed during the Hackaton of the UPC 2017, we embarked on this fascinating project. Since we believe that the future of the currencies are cryptocurrencies and all the blockchain technology behind it, we have decided to bring them to the Catalan Republic service.

What it does

CRCoin uses the same technology as most popular cryptocurrencies such as bitcoin and litecoin, but focusing in the Catalan Republic economic needs due to the uncertainty brought by the current Spain - Catalan conflict.

How we built it

How we said before, we used the blockchain technology running in various servers in order to ensure the transactions reliability and security. We also set the economic parameters of CRCoin such as the total amount of CRC available in the market, the value of CRC and how to get and store them. We have also built the CRCoin website to promote and educate people about how CRC works, how it can be used and spent. All of this, we think that will make it easier to mine and use CRC and consequently will blow up and expand CRCoin's value and it's market. 

Challenges we ran into

As starting point we were not that familiar with the blockchain technology, so the overall project was quite challenging. We had to learn from scratch and do a lot of research. Despite that, our main challenge was to run the first block of the CRCoin chain because we needed to run it in different servers simultaniously in order to validate all the transactions that were being made. 

Accomplishments that we're proud of

We are proud to be the richest in our currency because we were able to start mining it :) . We are also really proud of our website, where you can find everything you need about CRCoin and it's responsive design. 

What we learned

We learned how the blockchain technology works and how virtual currencies are created and implemented. We also refreshed the knowledge of website design and virtual server. 

What's next for CRCoin

We are going to study how the market is growing and developing. We will also try to expand the mind share of this project using the social media, blogs and press so the Catalan population can benefit from it. 
",,https://www.catalanrepubliccoin.com,,,,UPC,,,rogeralmato,UPC,3,jamipuchi,paolomateu,collroger13,
NiceShirtBro,http://hackupc2017f.devpost.com/submissions/78625-niceshirtbro,"Inspiration

We hate shopping.

What it does

Allows you to try out pants, shirts, and other clothing items on a 3D virtual model of yourself. The input is an image of the desired shirt. The result is a 3D model of yourself wearing it.

How we built it

Using mainly Unity3D (Javascript, C#) to compile the app and 3D rendering into Android. We used Blender for modelling the 3D objects.

Challenges we ran into

With our specific goals, it was also very hard to come across any documentation for many problems we faced. Also, 3D rendering is not always straightforward, especially on Android. 

Accomplishments that I'm proud of

Well, it works ! 

What's next for NiceShirtBro

We want to integrate a schedule functionality such that the application schedules for you what to wear every morning.  
",,,https://s3.amazonaws.com/challengepost/zip_files/production/25870/zip_files/Hack_UPC_Build.apk,,"unity, blender, python, android, java",ETH Zurich,,,aalbahou,ETH Zurich,0,,,,
When Should I Leave ? (WSIL?),http://hackupc2017f.devpost.com/submissions/78627-when-should-i-leave-wsil,"Dense passenger traffic is a hazard and an inconvenience to commuters. WSIL? offers crowd monitoring and commute-time predictions to help commuters choose the right time to leave and begin their commute. 

Inspiration

According to a 2016 study by Moradi A and Soori H, citizens living in densely-populated urban cities are placed at a higher risk of traffic accidents due to mass commuter rush-hour flow, as millions descend simultaneously unto the transport system for their daily commute. 

A simple solution to this, was if we could somehow modify passenger flow times  and moderate the peak flow intensities. Our solution came to us when we confronted the subconscious question every commuter faces before their journey --""When should I leave?"" Indeed, if residents were able to access information on the location of crowded places and the public transport occupancy rates, it might nudge them towards waiting the rush hour out for a more comfortable commute. This would in turn decrease the probability of accidents due to the problem Moradi and Soori has set out. 

What it does

WhenShouldILeave.com is a simple and user-friendly web tool that conveys three things. First, it allows users to search their upcoming commute times, and uses a prediction model to forecast possible delays due to overcrowding of transport systems.

Second, it reports station and train densities through information gathered by smart-sensors. This helps the user anticipate how crowded the commute would be, and nudges them to wait out the crowds, if they are not in a rush. 

Finally, it maps out the dense hotspots in town for users to access. This helps both users who are looking for a quiet getaway, or users who want to know where the most bustling part of town is. 

How We built it

As a team, we functioned to our strengths. Maksim Artemev was able to create a scraper to collect data from social media about traffic flow and pedestrian behaviour through geotags. 

Nadezhda Zaborskaia, a data science student, helped us generate data in order to simulate live sensor readings, which helped us refine our prediction model further. 

Nithish Raghunandanan, our resident computer scientist, helped us greatly with the technicalities of the backend stuff. He pushed himself further by figuring out how to integrate the backend with the frontend. 

Isabella Nubari, a truly amateur coder (who only managed to pick up Java over the summer), had to learn CSS/Bootstrap/HTML in 24 hours in order to create a UX/UI for the program in order to make herself useful. (she is very proud of this achievement)

Challenges We ran into

Halfway through the hack, we ran into the challenge of truly battling the API provided by Thinktia, which simply would not cooperate. After a few tries and desperate pleas for tech support, we decided to pivot towards using hardware (a camera) to measure occupancy densities using machine learning. However, we ran into further problems of large libraries and thus decided to simulate actual data.  

The detour certainly cost us time, and we were not able to integrate all the elements we want. However our code actually works and that's what matters. 

Accomplishments that We are proud of

This is the first International / MLH hackathon for half of the team, and the very first hackathon for the other half -- we are very proud to have been able to complete a project. What we are even prouder of, is that fact that it actually works. We have included a really cute page for errors, but fortunately (or unfortunately), we might not get to see it much. 

What we learned

How to overcome a lot of challenges over 24 hours, and how to collaborate in an international team where everyone has a different primary language -- I guess you could say we communicated in code.

fun fact: we all coded in different languages too 

We each learned to pick up a new (coding) language in order to make this project happen, there was great personal expansion. 

What's next for When Should I Leave ?

We believe WSIL? is a scalable service that can apply to all smart cities. With the availability of more sensor data, we can build even more complex models that takes into account weather conditions, seasonal traffic flow and foot traffic on every street corner. Furthermore, we believe that our heat maps can be better improved with an overlay that indicates frequent road junctions where traffic occurs, or even where accidents occur. 
",,http://www.whenshouldileave.com/,,"ServiZurich challenge, Thoughtworks challenge, Best Domain Name from Domain.com, Amazon Web Services - Best Use of AWS, Bloomberg challenge, Opentrends challenge","python, scikit-learn, flask, google-maps, amazon-web-services, twitter, r, thingtia, jquery, json, css, html5, javascript, machine-learning, love, hard-work, frustration, coffee, no-sleep","Technische Universitaet Muenchen, Cambridge University, Leuphana University Lueneburg, Higher School of Economics","Domain.com,Amazon Web Services",,isabellaen,,3,nithishr,mrartemev,Nadezhda_Z,
GamePad,http://hackupc2017f.devpost.com/submissions/78628-gamepad,"GamePad

A series of games and applications using a Novation Launchpad

How to use it

Each game can be executed by calling the script directly from its folder (e.g. python tron/tron_game.py)

Additionally, there is a menu to select the game: python play.py.
This script waits for an input to select a game.

Games


Asteroids: Pilot a spaceship and dodge all asteroids
Simon: The classical game to memorize color sequences, but extra difficult
Tower: Build the tower up to the top
Tron: Ride the tron bikes to kill the opponent (multiplayer game)
Step Sequencer: A classical step sequencer to make some Acid Techno (not really a game, but fun anyway). Recommended: use the companion Ableton Live project.

",,https://github.com/Nar67/GamePad,,,python,UPC,,,Nar67,UPC,4,infaust,HectorMRC,adriansar,Davidas
Let'sAllJustHopOnAPlaneAndMeetInTheMiddleOfTheWorld!,http://hackupc2017f.devpost.com/submissions/78629-let-salljusthoponaplaneandmeetinthemiddleoftheworld,"Inspiration

Finding a good meetup place on a global scale is challenging. One important factor in this endeavor are airline fares. What if a new web service could aid in this situation and suggest the cheapest options?

What it does

This project finds the overall cheapest meetup place (airport) for a group of people across the world. 

Additionally, it respects personal restrictions, e.g., countries which each group member is willing (or able) to visit.

How I built it


Python backend using Flask, HTML/JS frontend using Bootstrap, map visualisation using D3.js.
Skyscanner's API for airfare data, both using cached results in the first step, during which the number of possible airports is heavily reduced, and live results for the second step, during which the best option from those airports is chosen.


Challenges I ran into

Typical programming challenges, especially since I'm not too familiar with a couple of the used technologies.

Accomplishments that I'm proud of

It works :)

Depending on the parameters, suggested airports are returned within about a minute. Given the large number of possible flights etc. this is a really satisfying time. However, credit where credit is due - this is the accomplishment of Skyscanner's great API!

What I learned

Working with Skyscanner's API, hacking together both backend + frontend including some appealing visuals in a short time.

What's next for Let'sAllJustHopOnAPlaneAndMeetInTheMiddleOfTheWorld!

More features, e.g., restrictions for the chosen airports (weather, seaside, capital, etc.), flexible dates/stay durations, and more.
",,https://github.com/cygery/HackUPC_Fall2017,,"Best Domain Name from Domain.com, Skyscanner challenge","python, flask, html, bootstrap, skyscanner, javascript, jquery, d3.js, datamaps",RWTH Aachen,,,cygery,,0,,,,
Refugees Project,http://hackupc2017f.devpost.com/submissions/78630-refugees-project,"Inspiration

We all know that now days there is a big refugees problem because of the wars and oppression, so in my opinion everyone should help in this problem with any possible way.

What it does

Basically it will support the refugee with all the data he needs about the current country that he is in it now on his way to his final destination country.

How I built it

It's built by LAMP stack, HTML, CSS, JavaScript, PHP, MySQL

Challenges I ran into

Data collection and data accuracy and working in the same time in the Front-end and the Back-end

Accomplishments that I'm proud of

Refine the idea and make it stronger depends on people feedback

What I learned

First of all i had the opportunity to see people from different countries, I also learned to design the idea from the scratch and plan it and to start building it and asks people about there opinions and try to be flexible for any new requirements and changes.

What's next for Refugees Project

It will act more like a platform to connect the owners of the jobs and the refugees and let them do business together. 
",,,,,"html, css, javascript, php, bootstrap",Ain Shams University,,,ahmedosama368,Ain Shams University,0,,,,
escape-from-pen-island,http://hackupc2017f.devpost.com/submissions/78632-escape-from-pen-island,"Escape from Pen Island



We used unity to build a survival-based game set on Pen Island. Think CoD: Zombies but with office supplies instead of walking cadavers, and only 36hrs worth of quality control. 
The objective of the game is to escape the island by finding the Hexastix portal (Funnily enough, the base shape of the hexastix is a rhomboid dodecahedron, a Catalan solid) whilst avoiding/killing any enemies.

This was our first attempt at a serious game, and it was interesting to explore Unity.
",,https://github.com/Tello-Wharton/escape-from-pen-island,,Thoughtworks challenge,"c#, shaderlab, hlsl, glsl","Aston University, King's College London",,,ellarbarrett,"King's College, Aston University",1,ABagel,,,
Spot the file,http://hackupc2017f.devpost.com/submissions/78633-spot-the-file,"Inspiration

Simplify the process of update a music chart website in order to get all the needed elements only with the name and the artist of the song.

What it does

It retrives the preview, artist, title, and image of a similar input.

How I built it

Using the Spotify API, Javascript, HTML and CSS.

Challenges I ran into

Attempting to interconnect a database with the API.

Accomplishments that I'm proud of

Learning new aspects of css, a lot of javascript and uderstand the API's.

What I learned

Learning how an API works and how to make the GET command.

What's next for Hack-UPC-2017

Getting ready to intercomunicate with the oficial page of the radio: www.radiovoltrega.com/happylist
",,,,,"css, javascript, html",UPC,,,mcasellas,UPC,0,,,,
Auto-photo,http://hackupc2017f.devpost.com/submissions/78637-auto-photo,"Inspiration

servizurich wanted to reduce accidents while #thoughtworks wanted to help the city. This inspired me to examine the reasons for accidents in my city/ country due to technology. The main reason was distraction via technology and people taking videos while they drive. This is dangerous since their attention is not on the road and can cause traffic build up or worse accidents.

So I wanted to build an app which reduced distractions while on the road. The came up with two main concepts which could be combined into one but all start with pressing a button in an app when you get into your car. This then turns your phone into a mode where it automatically disconnects calls but sends a message to the sender that you are driving. Since people have to turn on their camera to take videos as they drive, i realised its safer if they ask the camera to record and it is ready to take a video and it turns off without people needing to physically multitask.

What it does

did not have time to get a working model, even simplified versions of the app needed a lot of research and since the way methods would act were interconnected it was difficult to program without fully identifying all their roles.

How I built it

Tried using onCannedTextResponsesLoaded, reject and TelephonyManager. Think I might've found a way to make it partially work but do not have time to implement it.

Challenges I ran into

Emulator would not work and could not fix the problem so could only test on real phone.Trying to remember/learn how to program in Android studio while trying to figure out what each method and class needed in order to function without in depth documentation and how they will all interact with one another.

Accomplishments that I'm proud of

Researching in depth that I found quite a few methods and classes to accomplish the tasks at hand. 

What I learned

The depth and possibility for creativity is vast

What's next for Auto-photo
",,,,"ServiZurich challenge, Thoughtworks challenge",android-studio,University of Sussex,,,kopik,,0,,,,
BitcoinNewsTrader,http://hackupc2017f.devpost.com/submissions/78640-bitcoinnewstrader,"Inspiration

The increasing popularity of bitcoin motivated us to create a platform which would facilitate trading the cryptocurrency.

What it does

By providing an algorithm which predicts short term bitcoin fluctuations, it is now easier for people without experience in such domain to start trading. They will find our project to be a reliable assistant when it comes to buying/selling as well as planning future business moves, if the context allows.

How we built it

While part of the team was busy training a Neural network designed to offer insights based on historic data and news analysis, the other was focusing on sending (and rendering) the entire analysis result spit from the NN. The server is represented by a rather basic DigitalOcean droplet that was running a python container focused on both performance (zero-downtime during redeployment) as well as running async jobs to keep the platform updated with the latest analysis results that change due to our continuing working news crawler.

Challenges we ran into

The data mining task was long and painful, but we think the results are worthwile. Besides this, deployment was more challenging than expected as  we had multiple scripts that had to run in parallel.

Accomplishments that we're proud of

We are rather proud of the whole project, having managed to gather data and carry out 2 Machine Learning mini-projects (data for news sentiment analysis and data related to the bitcoin blockchain) and, furthermore, the fact that we managed to deploy a reliable stack to support all the requirements that we have set on.

What we learned

Pretty much improved on all areas which the project involved.

What's next for BitcoinNewsTrader

Creating our own sentiment analysis tool rather than using a third party, finishing the online deployment and coming up with a mid-term prediction algorithm too. 
",,http://dockerhost.test-script.c66.me,,"Everis challenge, Bloomberg challenge","python, scikit-learn, machine-learning, newspaper, bootstrap, docker, javascript, ai-applied-sentiment-analysis, digitalocean","University College London, University of Amsterdam",,,danyro364,"UCL, University of Amsterdam",3,dragos21popa,andreeab0905,teodorapatriche,
Telegram bot for group traveling planning [Skyscanner],http://hackupc2017f.devpost.com/submissions/78642-telegram-bot-for-group-traveling-planning-skyscanner,"Inspiration

The possibility to organize trips with groups of friends of different nationalities.

What it does

Searches the best flight option for the different members of the groups.

How we built it

We used python and the APIs of telegram and skyscanner.

Challenges we ran into

Accomplishments that we're proud of

What we learned

To use the skyscanner API as well as to be able to generate a bot for telegram.

What's next for Telegram bot for group traveling planning [SkyScanner]

Integration with database, and the possibility to add the bot to a group.
",,https://github.com/aramirr/hackupc,https://s3.amazonaws.com/challengepost/zip_files/production/25875/zip_files/hackupc.zip,Skyscanner challenge,python,upc,,,EduardCasellasBosch,"UPC, Universitat Politecnica de Catalunya",1,aleixsacrest,,,
WeeGo,http://hackupc2017f.devpost.com/submissions/78643-weego,"Inspiration

All of us are very active messengers' users. Many of our events are arranged in social networks. But sometimes we lose an invitation, forget about it or do not know anyone who would like to join us. The willing to solve this problem has brought us to WeeGo.

What it does

Imagine, you chat with your friends everyday, and often receive offers to get together, or you want to go somewhere but don't have a partner. In this situation WeeGo is a useful smart observer, who remembers your desires and looks for the best solutions to satisfy them. It detects actions, places and time, sends you invitations and receipts. You can also pay for the ticket with Telegram payment system. Finally, you may use aggregated by bot data in an android application where you will find beautiful interface to discover new people and new places. For long-distanced rides we provide users with integration with Skyscanner: discuss and track travels and flights easier than it ever was!

How we built it

We use NLP with requests to Google Places to fetch place, location and datetime of an action. Also, we generate previews with Bing Images. Our server has been deployed on AWS EC2. We have combined a lot of different APIs and SDKs, including Skyscanner, MyQR, Compreno, Google Places, Bing Search.

Challenges we ran into

We ran into ImaginBank chatbot challenge and Skyscanner challenge.

Accomplishments that we're proud of and What we learned

We have made a very good and friendly team with a nice separation of tasks. We improved our skills and results since last Hackathon, we have tested a lot of API and successfully combined them. In our humble opinion, the biggest accomplishments of our work are stability and usability of the product.

What's next for WeeGo

Among other things WeeGo is a way of data collection. Our next goal is to expand the service, finish data acquisition and train generative adversarial networks to add more options in text recognition. For the marketing part, we would like to cooperate with commercial organisations, create discounts for our customers and prepare data for future smart engines.
",,https://github.com/SecurityQQ/WeeGo,,"imaginBank challenge, Skyscanner challenge, Bloomberg challenge","natural-language-processing, python, flask, telegram, bot, sqlite, android, rxjava, google-places, bing-search-api, amazon-web-services, amazon-ec2",100000000000000000000000000000000000,,,SecurityQQ,MIPT,3,kholopov96,shuternay,rika95,
Take me to,http://hackupc2017f.devpost.com/submissions/78647-take-me-to,"Inspiration

The twist presentation during the opening ceremony.

What it does

It lets buinesses look for flights from within the Twist client

How I built it

I built it mostly just with flask.

Challenges I ran into

I had never made a live session, so using the live flight search was a new experience for me. I kept on adding features, and they were different from the last, so I had to remain flexible.

Accomplishments that I'm proud of

Making something that looks usable.

What I learned

Live sessions

What's next for Take me to

Making it more full-fledged, adding hotel support
",,https://github.com/Rallade/HackUPC,https://s3.amazonaws.com/challengepost/zip_files/production/25877/zip_files/submission_sans_api_keys.zip,"Doist challenge, Skyscanner challenge","flask, python, ngrok, twist, skyscanner",University of Sussex,,,Rallade,Sussex,0,,,,
UpTy,http://hackupc2017f.devpost.com/submissions/78648-upty,"Inspiration

Hackathons are really wonderful experiences. Hundreds of people meet, united by their passion to code and see technology advance. However, one question sometimes lingers amongst participants:
Is there a way to be part of a major breakthrough in our field?
Surely there will be some during our lifetime, but only a select bunch will be able to work on them.
Also, what could that major breakthrough be? Almost everything seems to be invented, and  the few things that aren't are being investigated by groups of scientists with far more resources and experience than us...
However, we don't want to be simple spectators of progress. We want to be a driving force pushing it. Therefore, after giving it a lot of thought, we have crafted a project which could actually change how people relate with their cities.

What it does

UpTy is a platform built to raise the life standards of citizens living in a specific city. It uses a large amount and variety of sensors to collect information, process it and deliver it to it's users, allowing them to take control of many aspects which usually go unnoticed but have a large impact on one's well-being. 
The features we will provide are only a small portion of a wide toolbox of services which could be provided using basic information collected in the city.
The webapp in our GitHub helps people plan their trips through a city, offering different criteria. You might want a route with a lot of vegetation that will help you relax or a walk through a quite zone. You may be scared of something happening to you while going back home after having dinner with some friends. Or you could simply want to bike through a zone that isn't too polluted.
For all of these ocasions (and more), UpTy's got options to find the directions that most suit your needs. 
It also has a strong social and environmental component, since it's mechanisms allow prevention of hazardous pollution situations created by an abundance of cars and help minorities and people in danger avoid possible issues.
For example, it shows most transited areas so you don't have to walk back home in empty alleys, and warns drivers when they are going to drive through extremely poluted areas.

How we built it

Using Opentrends's API, we access and store different sensor values. Then, through a Google Maps API and some algorithms, the best routes are decided to fit the user's needs, while also detecting possible dangers.
Since we are building a webapp, most of the coding is in JavaScript or HTML. However, the first steps and testing datasets are built with C++ and bash.

Challenges we ran into

None of us has any proficiency building web content, so the JavaScript and HTML part was kind of a hussle. We spent a lot of time on code academy learning the basics.
We were a little too greedy at first, trying to do much more without taking time into account. Later we had to sit down, reconsider our idea and eliminate some capabilities we really wanted to include (and which we will include in the future!).

Accomplishments that we're proud of

We believe that our idea could really change the way people relate to their environment, much like how Google Maps changed it after it became widespread. Our code is only a tiny portion of the picture we have imagined, but we are going to fight to make that image a reality. So we take pride in our vision, and we hope many people will share it. You can be the first!

What we learned

We learned a lot about chaining APIs together and pipelining different programing languages. We also worked really hard to make our UI user-friendly and elegant (we don't have much of a taste for this things). However, since our vision carries further after the Hack, we want a ""brand image"", which we tried to create using details like favicons and logos. Now we have learned that this little things can really change the overall feel of a project.

What's next for UpTy

Expanding all the options, including more reliable algorithms to calculate the data we want. Once we have a big enough pool of data, both in amount of sensors and in timelapse of data recorded, we plan on using ML techniques to not only monitor pollution and hazard levels in real time, but also predict them, avoiding possible incidents before they happen.
Finally, personalization is really important. We want users to feel like UpTy knows their preference. Therefore, we'd like to extend the ML capabilities to learn from our user and perfect the options offered, considering both the empirical data collected by sensors and the unique characteristics of the person using our platform.
",,https://github.com/Kyezil/upty.git,,"ServiZurich challenge, Thoughtworks challenge, Bloomberg challenge, Opentrends challenge","javascript, c++, google-maps, json, html, bash",Polytechnic University of Barcelona,,,porodrino,Polytechnic University of Barcelona,2,kyezil,rabbitwhile,,
start-contributing-to,http://hackupc2017f.devpost.com/submissions/78649-start-contributing-to,"start-contributing-to

Make contributing to your organization's open source projects easier by
collecting and categorizing all issues in one place!

This project is made of two parts:


a ruby script that consumes GitHub's API and collects data,
a static website generator that uses this data to build a searchable
overview over your issues.


Both parts were made using GitHub's own libraries, respectively Octokit
and Jekyll. In fact, we suggest using start-contributing-to to generate
your organization's main page on github.io. For more information, see
GitHub's excellent documentation: https://pages.github.com/.

Install
$ bundle install

Usage

Create a .netrc file in your home directory containing
machine api.github.com
  login $YOUR_GITHUB_USER_NAME
  password $YOUR_GITHUB_USER_PASS

Then you can start developing by doing
$ lib/generate.rb $YOUR_ORG_NAME
$ bundle exec jekyll serve

and pointing your browser to localhost:4000.

Author

Jacopo Notarstefano (@Jaconotar)

License

MIT
",,https://github.com/jacquerie/start-contributing-to,,,"html, ruby, css, javascript",University of Pisa,,,jacquerie,,0,,,,
Task Keeper Bot,http://hackupc2017f.devpost.com/submissions/78650-task-keeper-bot,"Task Keeper Bot
",,https://github.com/vylion/taskkeeperbot,,,python,Universitat Politècnica de Catalunya,,,vylion,,0,,,,
SkARscanner,http://hackupc2017f.devpost.com/submissions/78652-skarscanner,"Inspiration

We wanted to prove how shared AR experiences improve the interaction between users in already existing situations. Since on of the sponsors was SkyScanner, we wanted to show the way we would like to use AR for the experience of comparing and checking flight tickets

What it does

SkARScanner displays a Europe's map with the cities that have at least one available airport. When the user selects two of them, SkARScanner connects to the SkyScanner API to retrieve the cheapest price, which we display in the map in a visual way to all the users.

The departure and arrival airport can be set by different users, allowing a collaboration between them that improves the interaction with the AR experience.

How we built it

We used ARKit for iOS, HoloLens, Unity and the SkyScanner API, among other technologies, to be able to create this AR experience

Challenges we ran into

Using ARKit, which is a quite new technology, was challenging but really enjoyable because it is quite easy to use and build projects with it. MapBox was a challenging technology as well since it was also our first time using it.

Accomplishments that we're proud of

Learning how to use ARKit and make it work with HoloLens.

What we learned

We learned how to use ARKit, MapBox and Photon among other technologies. Furthermore, we experienced how to code in just 36h in a row.

What's next for SkARscanner

Improve it and take it further away.
",,,,Skyscanner challenge,"arkit, microsoft-hololens, ios, unity, mapbox, c#, skyscanner",UPC,,,sigr3s,UPC,3,CristinaFontanet,Alr67,mariaabasprades,
early-bird,http://hackupc2017f.devpost.com/submissions/78653-early-bird,"Inspiration

All of the great people of our times wake up early. It makes them more productive and gives them more time to achieve their goals and change the world. 

What it does

It brings the element of gamification to the first activity of the day- getting out of the bed.
Users gather in groups and challenge themselves to wake up earlier. We provide platform to control the process and enforce it using system of punishments and rewards.

How we built it

We used Python and flask for backend and ionic for multi-platform mobile experience.

Challenges we ran into


Unstable Wi-Fi connection
Sleep depravation
CORS
Angular HTTP Request service
Smaller team.


Accomplishments that we're proud of


Beautiful logo
Multi-platform mobile app


What we learned


A lot of ionic and AngularJS
Teamwork


What's next for early-bird


Early Bird still needs a lot of our attention, and even more work. We plan to finish it in the future.

",,https://github.com/okraskaj/early-bird,,"Amazon Web Services - Best Use of AWS, Bloomberg challenge","python, flask, ionic",Warsaw University of Technology,Amazon Web Services,,okraskaj,Warsaw University of Technology,2,alcaster,skarzi,,
FIB Dragon Tower Defense,http://hackupc2017f.devpost.com/submissions/78655-fib-dragon-tower-defense,"Inspiration

We love our university and we wanted to develop some game located in there. As catalans, we also love dragons so we mixed this two awesome components to build the ultimate videogame for FIB students.

What it does

It's a realtime videogame for all platforms where 5 teams have to dominate with their dragons the central tower of our university (FIB) when the clock time is over.
To make this more funny we have added the capability for the dragons to shoot and kill the dragons of the other teams, so the competition gets really hot and intense.

How we built it

We basically used Unity and a bunch of creativity and love.
Additionally, we used Mapbox to autogenerate the maps.

Challenges we ran into

Dragons were worth 9 beers in the Asset Store. That hurt :(
It was also difficult to locate interest points in our uni, it seems that there aren't many interesting things here :(

Accomplishments that we're proud of

Our dragons are so cute, and they are pretty well integrated to our university ecosystem.

What we learned

It's better to invest 18$ in Unity Dragons than in 9 beers.

What's next for FIB Dragon Tower Defense

Extend this awesome game until make it the king e-sport in our university.
",https://www.youtube.com/watch?v=brFpuUoAuU8,https://github.com/pautena/HackUPC_2017_winter,,,"unity, mapbox",Unveristat Politècnica de Catalunya,,,pautenavidal,,0,,,,
Peep'Can,http://hackupc2017f.devpost.com/submissions/78656-peep-can,"Inspiration

Did you know there are over 5.400 million dogs registered in Spain? A figure that means that in 49.3% of houses live at least one pet. A surprising number that increases every year.

Living with a four-legged friend has more benefits than disadvantages, but if you live in a big city and you have to take him to a pipican you will have encountered more than one problem.

A pipican is a dog-friendly recreation area where they can play and make their basic needs. These delimited areas are promoted through each City Council and each one has different facilities.

What at first glance seems an advantage, sometimes, becomes a nightmare. Especially for the safety of our canine friends. Surely many times you have had to turn around because in that pipican there is a dog that has an aggressive character and is not related to your pet, or was full of people and your dog was scared because it is very fearful.

Would not it be great to know which pipicans are optimal for your pet before leaving home? If the dogs in there at that time are compatible with the character of your dog or if it has enough space for your friend to run at his ease.

In response to this need we have created Peep'Can, the first app that gives you real information about the state of your closest pipicans and recommends which ones are optimal for your pet.

What it does

Peep'Can is an application whose main purpose is to provide security to your four-legged friend and the other dogs of a pipican. But it also provides information of interest as services available or the number of people who are located at a given time.


The application has a pet profile with information about its age, sex, race and main characteristics of its personality. This information relates to the others dog’s profile in order to detect affinities in their character.
When opening the application, 2 sections are displayed. One shows you a map with the closest pipicans according to your location and if they are advisable for the profile of your dog, according to a color code in the markers. (yellow = optimum and orange = not recommended). The other section allows you to select with which pet you want to go to the pipican (just in case you have more than one).
By selecting one of the pipican shown on the map, we can see detailed and real-time information related with:

Pipican’s name,  Adress, Facilities, Pipican’s pics, Reasons why this pipican is optimum or not recommended.
In order to access in a pipican and carry a control, you will have to validate the entrance and exit. How?. Approaching the mobile to the sensor located in the entrance. Then you listen a “peep”which means the door is open and you can entry.


How I built it

We built an Android Mobile App using NFC to do dog’s check in and check out on the pipican. In addition, thanks to Open Trends platform we've created a sensor's network in order to know the real time information about the pipican but also we suggest new open data for future issues.

Challenges I ran into

It’s always a challenge to imagine and realize an idea in 24 hours. But it’s even more challenging to abandon an idea in the middle of the hackton to start a more innovative one.
Implementing Android, as always, has been complicated and we have realized that we had a wrong concept about NFC in Android.

Accomplishments that I'm proud of

It’s the first time we collaborate in a multidisciplinar team so, even the difficult to get with an idea in 24 hours (lees in our case), we are proud of learning things about other fields.

What I learned

The team was multidisciplinary with computer profiles but also from communication field. So both parties have been able to nourish of different knowledge and that has enriched different points of view about the project.

What's next for Peep'Can

In a second phase, we think it’s interesting to add other functionalities and improve existing ones:
High Frequency Pet Identifier: Currently, the app connects from mobile to wall reader (tablet), but it would be interesting if the dog has a device that identifies high frequency (more powerful than the current chip) in its collar. With this, we would stop depending on the user to know which dog is with him, if he has more than one.

Sensor Dispenser Bags: It would be interesting to put devices to automate different pipican’s facilities. For example, replace the current dispenser with a sensor-controlled one. We can save an unnecessary waste of bags, control the consumption to replenish and on the consumption per user.

Social Network: from the profiles of each pet would be possible to build a social network to know the compatibility between them, so they can enjoy and play with those who are most related to them. In addition, it is a tool that serves users / owners to get in touch with others.

Having this technology will not only provide security to pets and users. This will provide better services or analyze different data that will be interesting for City Councils. 
From data obtained through this platform, we can collect relevant information such as frequency of use or time, number of pets per pipican, etc. In this way, more efficient solutions can be designed like a better distribution of pipicans, better cleaning schedules, etc.
",,https://github.com/sergiowalls/pipicapp,,"ServiZurich challenge, Thoughtworks challenge, Bloomberg challenge, Opentrends challenge","android, nfc, api, opentrends, json, photoshop","UPC, Complot",,,gonzalgarsoraya,,3,JuanjoVG,sergiowalls,francesc_de_puig,
Airswap,http://hackupc2017f.devpost.com/submissions/78659-airswap,"Inspiration

Our inspiration came from the actual journey we had to make to HackUPC. We flew in with Ryanair as per usual, most of the people were not happy with their randomly allocated seats, resulting in a massive delay and a lot of unnecessary fuss. Airswap is our solution to this ever occurring problem, helping people flying in the world. 

What it does

Airswap allows unhappy customers to register their already booked seats and get new, better seat allocations on their flight before they even board.

How we built it

The core logic is based on advanced mathematical analysis of seat allocation including, for example, partitioning and bijective mapping between the physical and virtual space. We have used dynamic web application technologies in order to construct the user interface in order to make the allocation process as simple as possible for the user.

Challenges we ran into

Even though the algorithm to calculate the best allocations seemed daunting to start with, we have ultimately managed to tackle the problem and create an efficient solution, including a formal proof for its optimality.

Accomplishments that we're proud of

We are really proud of our algorithm of seats shuffling. It works even better than human thinking!

What we learned

We learned how useful were the algorithms & maths classes from high school. In addition, it also became evident to us how real-world problems can be solved by the application of technology.

What's next for Airswap

We want to have a better user interface and promote it to people who need it as we believe it can really save a ton of time and pain that come with flying.
",,http://cristian2.pythonanywhere.com/,https://s3.amazonaws.com/challengepost/zip_files/production/25881/zip_files/airswap-slides.pdf,Best Domain Name from Domain.com,"python, html5, css, javascript","Imperial College London, King's College London",,,oanaciocioman,,2,crm15,tania_c1997,,
contaminacao,http://hackupc2017f.devpost.com/submissions/78663-contaminacao,"contaminacao

Pollution App
To develop an idea for HackUPC, we brain stormed all the things we disliked about the city we live: Barcelona. We got to the cocnclusion that it was air pollution and traffic. Those are the reasons why we decided to develop an app which allows users check air pollution levels at diffrent cities of the world. The information should be acquired by sensores instolled at the cities and actualized every hour. Althought, for the developement of our app we simulated sensors and its values whith the opentrends base data thingtia. Also, we wanted to offer the users different traffic routes, so they could choose the most ecofriendly and less transited, but this last idea has not been developed as we runned out of time. 
",,https://github.com/mbuenaventurac/contaminacao,https://s3.amazonaws.com/challengepost/zip_files/production/25884/zip_files/Contaminacao_%285%29.zip,Opentrends challenge,,Universitat Politècnica de Catalunya,,,mbuenaventurac,,0,,,,
Space Gaze,http://hackupc2017f.devpost.com/submissions/78666-space-gaze,"Inspiration

I was thinking about a space trip while reading a book, and then I though, why not, let's do one!

What it does

You are a starship alone in the galaxy, that has to destroy the objectives (stars and so) because that is all you have ever known.

How I built it

I built it with Unity3D. I programed all the logic by myself, and the graphical effects such as particle systems are also made by me with the tools Unity provides. The 3D models are borrowed from free assets.
I used a Tobii Eye Tracker as input, because it was an interesting challenge I wanted to run into.

Challenges I ran into

Developing something with an Eye tracker for the first time. Also starting and finishing a project all by myself.

Accomplishments that I'm proud of

Having finished the project and with a result I am very prouf of. I enjoy the look and feel of the game and it is beyond what I thought I could accomplish at first.

What I learned

I learned a lot about computer graphics by doing a lot of things by myself. I also learned to use and develop with an Eye Tracker and it was so cool.

What's next for Space Gaze

I would like to expand the universe. More different stars and starships, with different abilities and challenges each one. Also writting some story about it all would be very nice.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/25940/zip_files/SpaceGaze.zip,Bloomberg challenge,"unity, c#",Universitat Politècnica de Catalunya,,,Martiruhay,,0,,,,
twitCoin,http://hackupc2017f.devpost.com/submissions/78667-twitcoin,"Inspiration

Inspiration was to find subtle factors which can influence Bitcoin rate - twitter post, for example. After the analysis of data and finding correlations, we were aiming to predict how a specific twitter post may affect Bitcoin.

What it does

The analytical tool we created is capable of making prediction based on past data from twitter. It can predict rise or fall in Bitcoin rate based on sentiment analysis of a new twitter post.

How we built it

In first stage, we scraped twitter posts related to Bitcoin/cryptocurrency/blockchain from influential organizations and people for the last year. Then we did sentiment analysis of data by implementing our own classifier and scoring all tweets by their attitude toward Bitcoin (positive, negative, neutral). For front-end, we created SPA and implemented visual representation of data using Recharts, which used API built on Flask framework.

Challenges we ran into

It was hard to sort out real data from fake on twitter. Also, we had to use third-party tool in order to scrap twitter posts because twitter API limited us to only a week of posts' history.

Accomplishments that we're proud of

We managed to finish both back-end and front-end on time, despite the fact that we used highly advanced and complicated machine learning techniques which were relatively new to all of us.

What we learned

To work as an agile team, dividing small tasks and helping each other. We became more comfortable with machine learning and with data analysis tools.

What's next for twitCoin

To apply the same principles on other currencies (not necessary cryptocurrencies). Also, to unbiasedly rate reliability of data sources.
",,https://github.com/gaisin/twitcoin/,,Bloomberg challenge,"python, javascript, css, react, redux","The University of Edinburgh, National Research University Higher School of Economics, Ufa State Aviation Technical University",,,wins2on,Ufa State Aviation Technical University,2,Sindbag,rgaisin,,
Skyblue,http://hackupc2017f.devpost.com/submissions/78669-skyblue,"Inspiration

We love the innovation and think that's an advantadge that you can realize your tasks only chatting with your mobile.

What it does

This bot can offer an easy and precise service to spent less time. The bot only need some interaction whith the user and can search for flights, hotels and rent cars and offer the best prices. Finally, it can do the payment throught Telegram.

How we built it

We have used the Skyscanner and telegram APIs with python at the back-end.

Challenges we ran into

Dealing with a new Telegram API never used before by us, also it's the first time we deal with an API throught JSON.

Accomplishments that we're proud of

We have joined the functionalities of two APIs and adding sells. Firstly it was hard but we focused, stay calm and keep coding!

What we learned

We have learned how to make an interactive bot with payment, but the  most important, we have learned joint two different conceps with different languajes and make something useful.

What's next for Skyblue

Skyblue will be much more efficient, stable and add more functionalities.
",https://www.youtube.com/watch?v=j1lebz_A_iw&feature=youtu.be,https://t.me/firstobot,https://s3.amazonaws.com/challengepost/zip_files/production/25911/zip_files/HACKUPC.rar,"imaginBank challenge, Skyscanner challenge","skyscanner, telegram, python, json, imaginbank",1,,,fumaenverde,"UAB, Universitat Autònoma de Barcelona",3,Nosferatuu,oriolmartinezag,Nikittas,
Multipurpose-Image-Analizer,http://hackupc2017f.devpost.com/submissions/78677-multipurpose-image-analizer,"Multipurpose Image Analyzer

This multipurpose image analyzer is an asset of Matlab scripts/functions designed for CV interaction with low-resolution graphical content for Optical Character Recognition (OCR), image layer extraction and several other utilities.

Features

Optical Character Recognition (OCR)

In order to perform a proper OCR without the need of additional steps, the different functions provided in this repository offer a built-in noise filtering system, color flattering algorithms and image binarization. With this preprocessing, the OCR is granted for most languages with roman alphabet.

Despite not having full support, OCR algorithms have also been tested with several programming languages with an acceptable ratio of success.

Image Layer Extraction

Another feature of this project is its capability to analyze and extract the different layers of color of an image following several criterion of equality and similarity, aiming at further object detection under the assumption that related objects share common color properties.

Object Contour Detection

As a previous step to complex object detection, the problem of contour detection is nothing but a non-trivial challenge. The different scripts and functions aimed at this objective perform multiple rounds of image noise cancelling, color flattering and color projection in order to reveal the inherent contrast between different object, thus allowing to easily detect and divide the different regions of an image delimited by the different props, textures and objects present in it.

Further improvement

Optical Character Recognition (OCR)

OCR can be further improved by applying machine learning techniques to improve recognition of source code in several programming languages in a much more accurate way.

Object Contour Detection

AI techniques could be applied to the case of object contour detection in order to be able to easily separate superposed objects which turn out to be challenging using traditional contouring algorithms.
",,https://github.com/adeharo9/Multipurpose-Image-Analizer,https://s3.amazonaws.com/challengepost/zip_files/production/25895/zip_files/Multipurpose-Image-Analizer.zip,,"matlab, html, css, m","Universitat Politècnica de Catalunya (UPC), Universitat Autònoma de Barcelona (UAB)",,,adeharo9,Universitat Politecnica de Catalunya,1,Daryan,,,
Get Your Ass to a Hack!,http://hackupc2017f.devpost.com/submissions/78678-get-your-ass-to-a-hack,"Inspiration

There are a lot of hackathons happening around Europe and America. Some provide travel reimbursements, some don't. Nevertheless, it's useful to plan your trips and estimate flight costs. If only there was a web app for this...

What it does

It lets you view hackathons in Europe and/or elsewhere and find return plane tickets on those dates (outbound day before the hack, return on the same day as hack ends).

How we built it

We used an unofficial MLH API and the Skyscanner API. Everything is written in Python with Flask and the requests API.

What we learned

Registering a domain can be harder than expected.

What's next for Get Your Ass to a Hack!

Change the domain name.
",,http://getyourasstoahack.com,,"Best Domain Name from Domain.com, Skyscanner challenge, Amazon Web Services - Best Use of AWS","skyscanner, python, flask, html, css",The University of Edinburgh,"Domain.com,Amazon Web Services",,pecoraa,,3,qaisjp,said026,titasanciukevicius,
Gates VR,http://hackupc2017f.devpost.com/submissions/78679-gates-vr,"Inspiration

We all wanted to make a game. I had the idea of doing something in Python, but Gerard wanted to make some shooting game using VR. That was my plan B, and a friend of us chose to join us as well, so... here we are!

What it does

It grants you some time to entertain yourself shooting mindless monsters who want to escape through a portal and also kill you. It also lets you play by just moving your hand to perform all actions

How we built it

We used Unity3D as a game engine, using lots of free stuff from the Asset Store and some from the internets too. We also used APIs from Oculus and Myo to use their products in-game. We did all coding in C#, and we were fueled by coffees, Red Bulls and HackUPC's yummy food.

Challenges we ran into

Only one of our computers could run Oculus Rift seamlessly, so I (Miguel) went back home and brought my battlestation to aid the situation. I also had to be away for two hours for an emergency... and guess what? We haven't slept tonight!

Accomplishments that we're proud of

It runs, doesn't seem to crash and everyone who has seen it (or played it) thought it was rad. That's more than enough for us!

What we learned

Using new technologies we can't afford, and expanding our boundaries learning things we didn't know from Unity (by then).

What's next for Gates VR

Add support for those who don't have VR at their homes... yet. And KB/M support, because Myo hasn't had any updates since 2015!
",https://youtu.be/V60UvkiOqiY,https://github.com/GeriBP/WinterHackUpc2017,https://s3.amazonaws.com/challengepost/zip_files/production/25923/zip_files/GatesVR.zip,,"unity, oculus, myo",Universitat Politecnica de Catalunya,,"Myo Armband,Oculus Rift",ExaltedRevenge,FIB,2,gbelenguer,Davigox,,
FirstAId,http://hackupc2017f.devpost.com/submissions/78682-firstaid,"  

  

Inspiration

New technology approaches are being implemented to improve people's quality of life, and e-health is one of the promising fields which will make an impact into everyday living. Healthcare innovation could make diagnosis and medical recommendations more accessible to all human beings.
Therefore, new connected health assistance services could be a common thing in the future, implementing new AI & machine learning solutions. Our chatbot aims to put all these innovations at the service of society.  

What it does

FirstAId is able to identify several diseases from a picture provided by the user. It also provides the user with useful information, such as possible treatments and charts showing recognition statistics.
It is able to recognize user-specified symptoms in order to improve disease classification.
It comes with an assistant which provides nearby healthcare centers and their location where the detected disease can be treated.
The user can subscribe to different city alert channels and will be warned whenever a new viral infection has been reported at that city. This can be revoked at any time. In addition, users can report those viral infections so other users get notified immediately.  

How we built it

The image disease detection/classification system runs on Mobilenet, a class of convolutional neural networks (CNN) which is lightweight, resource-friendly and aimed to provide reliable results even with relatively small datasets.
Inception_v3 (another CNN) has also been tested, but resource/accuracy trade-off is better with Mobilenet.
Various datasets were built from medical scientific publications and from some scraping too.
The CNN was then retrained to classify several diseases, reaching a 75% accuracy on average.
The chatbot is built with Telegram Bot API. We chose an architecture based on microservices, so we used Docker for that and deployed it using an AWS EC2.
Python was the main programming language.  

Challenges we ran into

Since there are only a few, and limited, image datasets available, we had to make different datasets and to experiment with different CNN retraining parameters.
In addition, the datasets were quite small, so serious data augmentation had to be applied in order to improve accuracy and prevent overfitting.
Some diseases are similar in appearance, and the CNN was having trouble when classifying them. This was (almost) solved by unifying some quite-similar diseases and using user-provided symptoms to decide the final definition. This also improved general CNN accuracy thanks to less categories, more images per category.  

Accomplishments that we're proud of

We were able to submit a solid project, with several features. We are proud of the general accuracy and reliability of the image diagnostic.
We generated some Tensorboard plots, which were very useful for adjusting experiment parameters and comparing performance between datasets. We were able to compare CNNs to choose the one that fits better to our needs.  

What we learned

We are now concerned about the importance of data augmentation techniques in order to mantain reliable CNN predictions with not-so-huge datasets. We hadn't worked before with image recognition and this was an exciting challenge to solve.

What's next for FirstAId

We would like to incorporate more diseases to the project in order to expand the user base, and a bunch of new features such as a color blindness test.
",,https://t.me/FirstAIdUPC_bot,,"Best Domain Name from Domain.com, Amazon Web Services - Best Use of AWS, Bloomberg challenge","python, machine-learning, docker, telegram, mobilenet, plotly, tensorflow, inception",Facultat d'Informàtica de Barcelona (Universitat Politècnica de Catalunya),,,fcondecodorniu,Universitat Politecnica de Catalunya,2,Joaquimdcp,Swaggaaa,,
emuji,http://hackupc2017f.devpost.com/submissions/78683-emuji,"emuji

Emuji is based on https://github.com/slackapi/easy-peasy-bot

The purpose of emuji is creating a bot through which the user can send audio files that are lyrics on videos based on keyword that denotes an emotion/is part of that lyric.

Emuji is currently not functional as a whole although different components have been built.

The project also needs a set-up as a Slack app + bot and runs on localhost.
",,https://github.com/eustash/emuji,,,"python, javascript, css, c, shell",University of Southampton,,,tgp1u16,University of Southampton,0,,,,
Lazarus,http://hackupc2017f.devpost.com/submissions/78687-lazarus,"Inspiration

There are 285 million people in the world with visual disabilities (over 400,000 million in Spain), 74% admit to having difficulty performing basic activities of daily living and only 21% live alone.
At the same time, 88.4% of this group in Spain has a smartphone and considers this technological device the most adapted to their needs (above the television, computer, tablet or e-book).

What it does

Lazarus, a mobile application for Android that helps blind or visually impaired people to move around the city and perform simple tasks of daily life without the face-to-face help of a caregiver, family member or friend using only basic tools such as geolocation, voice recognition or the camera.

Lazarus has two types of users:

Blind users: people who need help in situations of confusion (like getting lost in a public space) or emergency (read a warning text, for example).

Helper users: volunteers willing to ""lend"" their eyes to those who can not see. Its function is to answer the questions of blind people by transcribing texts or describing images.

What can the app do for blind people?

Lazarus has 5 basic options that can be used manually or with simple voice instructions.

1. Location:
A lost user can instantly know where he is thanks to simplified maps, specially designed for people with visual disabilities, and GPS.

2. Close to me
This option indicates relevant spaces that are around the user in an area of ​​500 meters as: pharmacies, banks, post offices, supermarkets or coffee shops.

3. Look for me
This option allows the user to ask other people what is happening around him eg in situations of confusion or danger (knowing if a food is in a good condition or some pills without a box are the ones he have to take).
The user only has to take a photograph and thanks to the help of volunteer users, will solve his doubts.

4. Read text
Lazarus automatically translates written texts into voice messages through an OCR process.

5. Describe object
Lazarus can recognize objects from the real-world in order to help you with your daily issues.

How we built it

On the server side we used Flask with MongoDB. On the Android side we used Android plus some more libraries like IBM Watson and one OCR to convert images to text.

Challenges we ran into

Accomplishments that we're proud of

All our showcase is complete. We are proud to say that we have accomplished a MVP in just 36h.

What we learned

We improved our skills in Flask + Android. And we learnt how to use the IBM Watson in Android.

What's next for Lazarus

Maybe be a product? =)
",https://youtu.be/OpHWqo8FO24,https://github.com/LaQuay/HackUPC-Fall-2017,https://s3.amazonaws.com/challengepost/zip_files/production/25956/zip_files/Presentation.pdf,"ServiZurich challenge, Thoughtworks challenge, Bloomberg challenge","android, flask, mongodb, ocr, ibm-watson","Complot de Creativos, UPC",,,elorenteg,Complot de Creativos (Barcelona),2,LaQuay,sandrusmb,,
ERCA,http://hackupc2017f.devpost.com/submissions/78691-erca,"Software which helps you to automatize things on the car by simple voice recognising of commands. Preventing the pilot to loss the attention of the road. The idea is to catch orders using Google Speech Recognition, and treat them with Robot Operating System (ROS), allowing us to add functionalities as modules connected to a master node.
",,https://github.com/Adlona28/CarAssistant,,"Thoughtworks challenge, Opentrends challenge","c++, python, google-web-speech-api, iri-scripts, robot-operating-system-(ros), arduino",Universitat Politecnica Catalunya,,Arduino 101,danielmabo,UPC,3,ferranmafe,Marc43,Adlona28,
Pay@Place,http://hackupc2017f.devpost.com/submissions/78698-pay-place,"Inspiration

Make auth payments great again!

What it does

It's a inovative method for authoraized payments based on secure or known places.

How we built it

We build a Android app with Android Studio

Challenges we ran into

Implementing the back-end and API calls, we are using two APIs one for the payments an the other for locations and as data base.

Accomplishments that we're proud of

Being able to control all the data form de APIs.

What we learned

Use of APIs in Android and Java

What's next for Pay@Place

Improve the front-end, add some security and new features.
",,,,"Thoughtworks challenge, GFT challenge, Best Domain Name from Domain.com, Bloomberg challenge, Opentrends challenge","java, android","UPC, UOC",,,eloimuns,UPC,1,abozadev,,,
Evntex.org,http://hackupc2017f.devpost.com/submissions/78703-evntex-org,"Inspiration

Have you ever been in a situation when you were craving for going to the gig of your favourite band or other interesting event but didn’t have enough money for travel? Such problem was the main inspiration for creating our app - the app which aims to ease finding the cheapest traveling tickets for the events you’d like to attend! 

What it does

Our app connects with facebook account. Then, it gets all of artists or organizations that user liked and search for events associated with them. When results are fetched from Facebook API application tries to find affordable flight connections to these event. If it finds a low-cost opportunity to attend the event - it will notify a user.
Application also provides search engine for likes and events with cost of participating (flights) included.

How we built it

We used Facebook API to get user data & events information and Skyscanner API to get flights information.
Backend of our application is created in Python/Flask technology, frontend runs vue.js. We used REST for communication.

Challenges we ran into

“Scanning a sky” is a time-demanding process. We ran into a problem with API queries taking too long to resolve. As a first step we made our fetching logic better in terms of concurrent execution. After that we decided to further improve with leveraging both cached and live versions of the API. 

Accomplishments that we're proud of

We are proud that as a group of strangers we managed to deliver something and everyone had a chance to contribute to the project.Our application really works! And it can be really useful for people wanting to attend the best events at the best price! 

What we learned

We learned how to use Facebook API, Skyscanner API and improved our backend/frontend development skills. We also learned to be patient, when we asked API for too many flights. :)

What's next for Evntex.org

Our application works fine, but it should be more configurable (prices, dates, flight agencies). Also, Facebook is not the only source to get information about things which user is interested in.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/25919/zip_files/evntex.zip,,"python, node.js, mongodb, rest, vuejs, flask, facebook-login-api, skyscanner-api","Jagiellonian University, Warsaw University of Technology",,,arytmetyk,"Jagiellonian University, Warsaw, Warsaw University of Technology",3,pbn4,SzymonStankiewicz,mateuszblicharski,
Emory,http://hackupc2017f.devpost.com/submissions/78705-emory,"Inspiration

Our idea was to create something useful, something, that not only could be used in real life but would actually improve peoples lives. Doing research on chatbots we came up with an incredible idea of creating a responsive educational tool which could read and analyze human emotions. That was the birth of Emory.

What it does

The main purpose of Emory is to educate people by making them think about the way they communicate with others. The program reads messages provided in text format and generates the reply based on overall emotion range, with the addition to that we are planning to develop the app so it could compare multiple messages and represent the way human emotions change over periods of time.

How we built it

The hardest part of this project was to brainstorm all available resources and chose what we are going to work with. When we finally decided what we are going to do, tasks were split between team members and working alongside each other we accomplished most of our goals.

Challenges we ran into

The task itself was quite challenging, the most difficult part was to implement Twist API's into our system.

Accomplishments that we're proud of

Coming to Barcelona and being able to hack together a project in 36 hours for HackUPC!

What we learned

We had an opportunity to improve our coding skills by completing the challenge and had a chance to use AWS services and various API's for the first time.

What's next for Emory

Even though we accomplished most of our goals, Emory is still far from being perfect. We'll be looking forward to adding more functionality and improving the results accuracy, with possible expansion of emotion pattern range.
",,http://www.emorylive.com,https://s3.amazonaws.com/challengepost/zip_files/production/25934/zip_files/TextMachine-master.zip,Doist challenge,"node.js, ibm-watson, amazon-web-services, angular.js, python, html5",Robert Gordon University,,,ImRhys,"The Robert Gordon University, Robert Gordon University",2,esouthren,0602id,,
Hack&Survive,http://hackupc2017f.devpost.com/submissions/78708-hack-survive,"Inspiration

We always loved these old computer games based on command line like Zork and we wanted to make 
something fun that other hackers could see represented at. 

What it does

Basically the game sets you up a party of hackers just after the opening ceremony at a random Hackathon. It's an event
driven history where your choices will define your history and it's the metas meta you'll ever find. 

How I built it

Everything is written in C++ using the library pugixml for reading and loading events from xml files. 

Challenges I ran into

We were extremly jinxed at this hackathon. We lost some team members and we changed project like three times straight, so we encounter some time issues, lack of skill issues (we are freshmen, so...) and basically we fought against espaguethi code. 

Accomplishments that I'm proud of

Creating all the crazy events at 4am and using pugixml in a decent way. 

What I learned

That we really should sleep more at hackathons and don't be shy for being just n000bs.

What's next for Hack&Survive

We hope that the removal of espagueti code, more events and custom partys, as different endings. 
",,https://github.com/Starbuck65/Hack-Survival,,,"c++, pugixml",UAB,,,Starbuck65,,2,khartuin,AlysH,,
"Computer Vision, the plot ""twist""",http://hackupc2017f.devpost.com/submissions/78709-computer-vision-the-plot-twist,"Computer Vision, the plot ""twist""

Integration for Twist and Microsoft Computer Vision API to transcribe and translate text (handwrited or printed text) from images inside a twist thread and keeping them indexed by the search engine.

Inspiration

When we knowed about twist we thought that it could be a good integration to allow the users to transcribe handrwited text to plain text and use the features tha twist provides like search, also we implemented the translation because here at the HackUPC we met a lot of people from arround the world.

What it does

It allows the user to transcribe text from an image, from a telephone or a camera, handrwited or printed and poste it in a Twist thread.

How I built it

We used Python with the flask framework, Heroku to host the server,  sublime and git to edit the code and Twist to implement our integration.

Challenges I ran into

Learning 3 new APIs, Https requests, transform images, servers going down... and the lack of sleep.

Accomplishments that I'm proud of

Be able to overcome challanges and eventually develop an useful tool. 

What I learned

A lot of Https protocol, JSON, server management, and flask.

What's next for Computer Vision, the plot ""twist""

To implement the OAuth part of the project to be fully independent.
",https://vimeo.com/238251517,https://github.com/pauapplecat/HackUPC2017f,https://s3.amazonaws.com/challengepost/zip_files/production/25936/zip_files/HackUPC2017f-master_08-52-18-305.zip,Doist challenge,"python, flask, json, heroku",Universitat Autònoma de Barcelona,,,pauapplecat,Universidad Autonoma de Barcelona,1,Algafi,,,
SupplyCAT,http://hackupc2017f.devpost.com/submissions/78712-supplycat,"Inspiration

In our home town Ljubljana, there is a lot of small food businesses like bakeries, coffeeshops and restaurants. The struggle for them to keep up with taxes and big food chains is made even harder by all the food waste they experience due to more fluctuating visitation rate. At the same time, we believe we should be doing more concerning the overall food waste as it is a huge problem of modern society. 

What it does

It helps business managers keep track of the product demand based on time of the year, month, day of the week or even hours during the day so they can prepare an appropriate supply of specific products. They have an option of looking at overall visualisations based on their past orders, or plan their stock using predicted demand per product on a daily, weekly or monthly level. They can keep adding data to improve predictions via report. 

How we built it

Web application is built in Django and uses Google Charts as the base for visualisations. For machine learning there are two separate algorithms - linear regression and a neural network. 

Challenges we ran into

There was no appropriate data or API available online, so we simulated it using web order and visitation rate statistics. As there was also no order system available for us to connect to our platform, the user has to add the data manually - in an ideal world the tracking could be done automatically as orders are placed. Machine learning is no piece of cake either and we started learning about machine learning from scratch.

Accomplishments that we're proud of

We implemented machine learning algorithms which was a first for both of us and even though the predictions could be improved, that is mostly due to the whole data issue, lack of time and inexperience. Also we learned so much and though there were just two of us managed to produce something that actually looks nice. 

What we learned

Too much to describe in Markdown. :P 

What's next for SupplyCAT

Connecting the platform to orders system to get better data, complete the neural network. We're also thinking of adding some other functionality, like option to trade excessive products with other businesses close by. 
",,https://github.com/patricijab/hackupc,https://s3.amazonaws.com/challengepost/zip_files/production/25915/zip_files/hackupc.zip,"Thoughtworks challenge, Bloomberg challenge","python, django, sklearn, javascript, html5, css3",University of Ljubljana,,,nezadjukic,University of Ljubljana,1,patricijab,,,
HackerBooth,http://hackupc2017f.devpost.com/submissions/78713-hackerbooth,"Inspiration

We are a team of 4 members with about 30 hackathons worth of experience between us. One thing we noticed at these hackathons was that seldom a Photo Booth was present. So we thought of using all the materials available to us, including trash such as used card board boxes to build a photo booth. 

What it does

It is a photo booth affectionately called Scotty that takes 3 pictures of you when you ask it to snap you up. This then sends these photos to the Hackathon's and MLH's Twitter handle.

How we built it

We hacked a DSLR camera to click photos as per a bash script defined by us. We triggered this bash script on the Raspberry Pi using the Google Assistant, which runs on the Raspberry Pi too and awaits a user's photo request. The assistant then sends a request to a Flask micro service that starts execution of the bash script. The bash script writes the images to the Raspberry Pi and then triggers a Python script to combine it into a collage with the user's images and the hackathon/MLH image. Once that image is created successfully, we post the data to Twitter and clean up the Pi's memory to get ready for the next set of photographs. We also spent time on building the casing out of leftover cardboard, duct tape and stickers from around the hackathon venue. 

Challenges we ran into

Setting up network interfaces on the Raspberry Pi. We had a Raspberry Pi but no HDMI cable to connect a monitor or an ethernet adapter or an ethernet cable. Therefore, setting up network interfaces using headless mode was a pain. Moreover, wifi never worked and we were stuck with an additional cable. Closer to the submission time, even our ethernet connection stopped working and we weren't able to login, however, it turned out to be an issue with the host computer's OS. 

Accomplishments that we're proud of

That we were able to match all our feature specs and go beyond to add aesthetic appeal through recyclable materials. 

What we learned

A lot about network interfaces. Quite a few things about bash scripting. 

What's next for PhotoMcPhotoFace

Filters applied using subject understanding through something like Microsoft Cognitive Services. 
",,https://twitter.com/UPC_booth,,"Thoughtworks challenge, Bloomberg challenge","raspberry-pi, dslr, google-home, zoom-pulse, usb-microphone, cardboard, duct-tape, bash, python, twitter","University of Manchester x 3, City University of London",,,achadha0111,,1,mihneasavu,,,
SmartTaxi,http://hackupc2017f.devpost.com/submissions/78715-smarttaxi,"Inspiration

The inspiration came to us not in a easy way. We discuss about what to do for more than 4 hours. However, we was thinking in two things Iot and transport and finally we got the idea, SmartTaxi.

What it does

The basic idea is to make more efficient the movements of taxis. The less they drive to get a client the less they make ecological footprint. With an Android app the taxi driver can collect data about where he has got a client. The data is shared in a database, Thingtia cloud. Finally with a web page the agency that manages the taxis' flow can know where they have to send the taxis becaus they know where the people tends to get  a taxi.

How we built it

We have developed an Android App to get data from taxis and know where and when they collect a client. It shares the information with a database offered by OpenTrends, Thingtia cloud. In this database it's easy to store data from sensors and manage diferent types of them. Next we have a web page developed with PHP, javascript, html and css where we manage all the data that we recollect. With the api of googlemaps and heatmap we show the zones of the cities where the people tends to get  a taxi.

Challenges we ran into

Develop a project related with Iot and smartcities.
We have deal with the api of Sentilo based in REST interfaces and thingtia cloud.
We have develop a functional Android App and webpage.

Accomplishments that we're proud of

We're proud of our capacity of sharing work and work together in this project

What we learned

We learned about REST calls, make http requests from Android, Google maps api and the most important be patient and don't become crazy without sleeping and fixing issues.

What's next for SmartTaxi

Maybe put more effort and get a final product that can help another apps like UBER or Cabify. Mybe tr y to make a deal with taxis' company who knows?
",,https://github.com/kalop/SmartTaxi.git,https://s3.amazonaws.com/challengepost/zip_files/production/25916/zip_files/StingTools_SmartTaxi.zip,"Thoughtworks challenge, Opentrends challenge","android, php, javascript, html, css, thingtia-cloud",UAB,,,AlbertCabre,,0,,,,
Panenka,http://hackupc2017f.devpost.com/submissions/78717-panenka,"Inspiration

Fantasy sports have quickly evolved into one of America's favorite pastimes, and as fans of fantasy sports, soccer, and some healthy trash-talking alike, we thought it would be cool to improve upon the existing games out there.

What it does

It allows people to effortlessly find opponents to play against in order to prove their knowledge and passion for the game in a measurable way as well as gaining excitement with the involvement of money.

How we built it

We built it as a web application using Django and Python.

Challenges we ran into

Data gathering was the most challenging part, as well as some decisions regarding the business logic and trade-offs we had to make along the way.

Accomplishments that we're proud of

We think that we managed to deliver a promising MVP in a short amount of time that also looks pretty good considering neither of us has much experience with or love for design.

What we learned

We learning a whole lot about Django and the MVC framework, as well as about web scraping.

What's next for Panenka

We're looking to continue developing and improving our MVP and are looking to launch officially in the next coming months. A mobile version for Android and iOS is also in the horizon.
",,https://github.com/Urbistondo/Panenka,,,"python, html, css, django, selenium, pandas","Universidad del País Vasco, Universidad de Deusto",,,Urbistondo,Universidad de Deusto,1,egibar,,,
TheSCBarcelonaProject,http://hackupc2017f.devpost.com/submissions/78721-thescbarcelonaproject,"Inspiration

Nowadays, cities are expanding relentlessly, more citizens, more infrastructures, more services and more products overall are needed to stand this everlasting growth. We are sure that you are not currently aware of the thousands of city sensors that are near to you, so, in order to improve your day to day, we have designed this project.

What it does

This platform gives the user the capacity to know better the status of the city he lives, i.e, users can retrieve information about parking lots, show their closest parkings, knowing the air quality, among others. With this information (updated constantly), users will be able to enjoy more the city and be aware of it's problems.

How we built it

This project is based on an API, offered by Thingtia. This API is the heart and soul of this work. On top of this layer, we built our own API (acting as a middleware, between the user and the cloud) allowing complete transparency and high scalability. This middleware acts as a platform for an hybrid application which is based on the ionic framework, letting multiplatform support. The application brings the sensors closer to the user with useful information that may be of their interest. The Thingtia API is awaiting constantly for sensor data, this API sends the information to our API (stored at an aws-ec2 and deployed with a dockerized mongodb and node.js) and finally it's send to the ionic clients using socket.io and updated automatically.

Challenges we ran into

Although the project was of a complex nature, we surpassed all the problems that stepped on our way. The main adversities we faced were: the simulation of a sensor network, which created and received real data. To achieve such level of simulation, our API also integrates the ability to emulate new sensor's information. The other big problem was to obtain an adequate level of abstraction and transparency, along with the dockerization of all the project.

Accomplishments that we're proud of

We managed to create a completely new API and hybrid running, using the services provided by the Thingtia cloud.
Also we had the satisfaction to develop a project that may actually come true one day. This is why we are so proud of this project.

What we learned

We have learned how to use new sorts of technologies and improved the knowledge of the ones we already knew, enhancing our experience.

What's next for TheSCBarcelonaProject

As it's scalable and robust, this project can already support lots of new sensors and services, and it would be a good idea to integrate them one day.

You can check our work at our GitHub organization in the link you can find below.
",,https://github.com/LosMasmis,https://s3.amazonaws.com/challengepost/zip_files/production/25918/zip_files/android-debug.apk,"Thoughtworks challenge, Amazon Web Services - Best Use of AWS, Opentrends challenge","node.js, ionic, typescript, docker, mongodb, socket.io, amazon-ec2, express.js, javascript",upc,,,albertoanto96,"UPC, Universitat Politecnica de Catalunya",3,adriml96,Dulcecu,nballelo,
FLY&FOOTBALL,http://hackupc2017f.devpost.com/submissions/78722-fly-football,"Inspiration

Since all of us are really into football, and we really like watching football matches of our favourite teams, we thought it would be great to go and see our teams play when they are abroad. What's the problem? Travelling it's expensive, and fligths even more! So we have created the perfect solution for that...

What it does

This android app uses an API to get updated information of the football league. Then uses the Skyscanner API to get the cheapest prices for fligth tickets to the city where the match is. Pretty simple when seen from outside. 

Challenges we ran into

Since this is the first hackathon we have been, and that we have very little experience in coding. We have had many challenges, to name a few of them:


We didn't know how to program in Android. But we had some fundamentals in java, so we got through that.
We didn't know how to do a request from an API. Then we learnt that.
We didn't understand the skyscanner API. With the help of the skyscanner engineers we understood that.
Then if we wanted to get live prices we had to do a special request (a POST), and we weren't able to overcome this one. So this something to be implemented in the future.
And many more...


Accomplishments that we are proud of

We are really proud of what we have created, and to where we have gotten. Here there are some other  acomplishments:


We didn't sleep.
The app worked.
We will leave from hackupc having learned lots of new technologies.
We built something out of the nothing, without using libraries. We didn't know they even existed.


What I learned


Sleep is for the weak.
Libraries are useful.
Libraries help you save time.
APIs can be more challenging than what they look like.
That in 36 hours there's lots of free time.
Mentors are very wise.
Food at hackupc is really good.


What's next for FLY&FOOTBALL


Implement live prices using the Skyscanner API
Add support for more football leagues
Improve the performance
Create an Iphone app


A small conclusion

This weekend has been probably one of the weekends where i have get more work done than ever, but at the same time having lots of fun, meeting new people, stepping out of my comfort zone, to do something I never had done, and never even had planned to do, spend 36 hours coding non stop, in the university. I have realized I am capable of doing lots of things, even if I don't know anything about them, and that you just have to start and persist. I am sure I will repeat. Great experience!
",,https://github.com/HectorPascual/Fly-Football,,Skyscanner challenge,"android, java, skyscanner-api, football-data-api, android-studio",UPC,,,jaumecolomhernandez,UPC,0,,,,
TrevaSwipe,http://hackupc2017f.devpost.com/submissions/78724-trevaswipe,"Inspiration

Finding affordable new adventures with a swipe.

What it does

Starts by asking the airport of departure, a time range for the trip duration, and the number of people travelling. After the information has been inputted, TrevaSwipe provides the user with a flash card containing a destination and its price. All information is retrieved from Skyscanner's API. If the user does not like the country of arrival, the user swipes left on the country section. Then a new flash card appears with a new country. Likewise, if the user does not like the city of arrival, the user swipes left on the city section. Similarly, a new flash card appears with a new city of the same country. The process is repeated until the user selects a destination by swiping right.  

How we built it

We built the mobile app for both Android and iOS using React-native, javascript, python, and Flask.

Challenges we ran into

Integrating the API with the backend, and combining the backend with the frontend.

Accomplishments that we're proud of

Finishing a presentable app in under 24 hours.

What we learned

What's next for TrevaSwipe
",,https://github.com/aulon/trevaSwipe,,Skyscanner challenge,"python, flask, react-native, javascript","Jacobs University Bremen, TUM",,,surveycorps,"Jacobs, Technical University of Munich",2,talglobus,MihaiBaltac,,
Reminder-Python-Telegram-Bot,http://hackupc2017f.devpost.com/submissions/78725-reminder-python-telegram-bot,"Inspiration

What it does

Save data about future plans.

How I built it

Using the Python API for Telegram

Challenges I ran into

I've never use an API before and i've never built a bot.

Accomplishments that I'm proud of

Be able to finish a proyect.

What I learned

I've learn how to manage better the documentation.

What's next for Reminder-Python-Telegram-Bot
",,https://github.com/MGijon/Reminder-Python-Telegram-Bot,,,"python, telegram-python-api",UPC,,,MGijon,Universidad Politécnica de Cataluña,0,,,,
LevioSound,http://hackupc2017f.devpost.com/submissions/78728-leviosound,"Inspiration

We got interested on ultrasonic waves applications after seeing the project Dubzooka at the last edition of HackUPC Winter. After that, we started doing some research and we discovered a paper on acoustic levitation using ultrasonic waves and we got fascinated by the topic.



And after doing some research on people applying the paper and doing real life ultrasonic levitation we started developing our own solution.

Even though it has no direct applications yet, after refining and improving the technology we believe it can be a revolution in medicine and chemistry for its applications on the management of dangerous non-polar substances on container-less environments.

What it does

By irradiating the space inside our levitator with strong hypersonic waves we create a pattern of interference such that it has some regions in which the different forces created by the mechanical waves compensate themselves and gravity. On those spots the configuration of the forces is such that it creates stable equilibrium points, allowing small particles (up to a density of 2.2 g/cm3) to defy gravity and levitate.

Its statistics, levitating particles up to 2.2 g/cm3 and 4mm of radius, are a huge improvement over the current levitations methods. On one side, we have optical trapping, which only allows particles with a radius up to 0.01-10 μm, and requires the material to be dielectric or optically transparent. And on the other side, we have magnetic levitation  which, even though it allows levitating objects of a way higher size, it only allows levitating ferromagnetic particles, thus limiting a lot its application fields.

How we built it

We spent two days 3D-printing the main structure of the project at home before coming to the Hackathon. After that, once the hacking started we added the ultrasonic emitters and soldered all the components.
Once the soldering was done, we started studying the wave pattern suggested by the paper and experimented on generating them with different technologies (a signal generator, plain electronics, and, finally, an Arduino).



After a lot of errors and experiments, we ended up finding the right pattern and phase of the signals sent to each cone of transducers, and started developing an API in order to monitor the levitator.

Challenges we ran into

It has been a huge challenge to struggle with the control of the interferences and to be able to finish the whole project in time during the Hackathon, we were working with a technology we were all unfamiliar with (as we all have CS background, and are not familiar with waves and interferences).

It was also a challenge to be able to verify its behaviour, as it's based on a super delicate equilibrium and the created spots are invisible and difficult to find.

Accomplishments that we're proud of

Well, it LEVITATES.

What we learned

We learned a lot on the process, the main thing being to generate whatever signal we needed with arduino, we improved our soldering skills, and we acquired a lot of knowledge about interference and mechanical waves.

What's next for LevioSound

Some of the future steps needed in order for the technology to be efficient would be:


Improve its power and stabilisation.
Add the possibility of moving the equilibrium spots.
Find a way to visualize and mark the equilibrium spots for a specific particle.
Improve the capacity of the levitator, allowing it to move heavier particles.

",https://youtu.be/OP4U_XI3JpY,,,Bloomberg challenge,"arduino, nodemcu, node.js, magic",Universitat Politècnica de Catalunya,,,Gilbertomy,,3,jlcdev,Portal-P,Niles_XIII,
ChikaChan,http://hackupc2017f.devpost.com/submissions/78729-chikachan,"Inspiration

We like patapon: it's silly and simple yet entertaining

What it does

Is a rythim based game where you input melodies to manage your tactics.

How we built it

We used unity and some original sprites from the game. Also some pokemon sprites to display a 'boss'

Challenges we ran into

Finding good free sprites in the internet is hard, also animating them correctly takes long. Arrows are also a pain to animate decently.

Accomplishments that we're proud of

Arrows look beautiful, our input and coordination work very well. 

What we learned

Working with unity to make a simple 2D game

What's next for ChikaChan

Getting a boss thats not just decorational
",https://youtu.be/6-EzJsjfyUM,https://bitbucket.org/Xarxaxman/cheekatxan,,,unity,Facultat d'Informatica de Barcelona,,,jcasado94,Universitat Politecnica de Catalunya,1,xarxax,,,
FlyNexus,http://hackupc2017f.devpost.com/submissions/78732-flynexus,"Inspiration

We participated in HackUPC Fall 2016 but we didn't submit a project, because we had this idea but we spent time trying different ways of implementing the frontend and backend and didn't know how to put it together.
We are inspired to make a web app, while using tools and languages we never use.
Finally, we released a working version, all made in these last 36 crazy hours

What does SkyNexus do?!

Given multiple locations in the world (using the Google Maps API to find any city you type), it will find an equidistant spot (based also, on how many people are on each location).
From this spot it will find the nearest airport, and then give you the cheapest flights for each person, using the SkyScanner API.
It lets people from all over the world reunite in a single spot, finding the cheapest flights and same distance for all.

How we built it

It is a classic frontend and backend; because we never developed a web app, we want to use stable stuff.
For example, I, Samuel Muñoz, have experience with Python, C++, and C#, and I haven't used any of these languages in this project. Instead I made the whole fronted, while learning about HTTP requests. I met people who also helped me with jQuery and the Google Maps API.

Frontend: HTML, CSS, Javascript, jQuery, JSON, AJAX. Classic and basic. Only GET requests
Backend: PHP, JSON, and more PHP. A bit of python to process the file with airport data. The server has no database, it only works with simple GET requests.

Challenges we ran into

At HackUPC Fall 2016 we didn't know how to put together a backend and frontend, because we didn't know about jQuery and AJAX, or HTTP requests. So we worked hard and learned stuff, but didn't present anything.
This year we decided what technologies to use, classic and stable ones, yet we have zero experience on them.
Every aspect was a challenge, but we are proud of how much we learned.

Accomplishments that we're proud of

We wrote every single line of code here at HackUPC, we used stable and good old tech for the frontend and backend, so finding documentation was easy. 
It works! At least for a demo, since the project is not 100% finished, and It's experimental.
We are proud of how much we learned, skill we gained, people we met, and fun we had at HackUPC. It is our second time.

Who and what?

Frontend (Samuel Muñoz)
Backend (Guillem Ramírez)

What's next for FlyNexus

We wanted to try out a different algorithm; instead of finding the equidistant airport for all the people, we could find the prices of flights of all permutations of all places we want to reunite, and then pick the cheapest combination.
Since that would require n*(n-1) calls to the API, where n is number of locations, we did not implement it.

Concurrency on the backend would make the API calls faster, but even then, the SkyScanner API is not very fast (if you want the cheapest prices it takes a bit of polling).The PHP backend is not concurrent but in the future this could be a cool idea to learn more!
Also, we don't have time to add to the frontend the patata.php file, which gives the exact coordinate of the exact equidistant point and would look cooler directly on the map. 
But it's okay, because this demo works. Behold, It's experimental! But the idea is here.
",,http://207.154.240.221,,Skyscanner challenge,"html, css, javascript, jquery, ajax, php, skyscanner-api, bootstrap, python, google-maps, google-geolocation-api","Universitat Politécnica de Catalunya, Institut Rafael Campalans",,,Gulpargo,"Institut Rafael Campalans, UPC",1,GRGargallo,,,
ImaginBank Helper Bot,http://hackupc2017f.devpost.com/submissions/78734-imaginbank-helper-bot,"We always wanted to do a Chatbot, so we did it. The oportunity was here and we took it.
",,https://github.com/egasato/ImaginHelperBot,,imaginBank challenge,"javascript, node.js, telegraf, telegram",UPC,,,egasato,"UPC, Universitat Politecnica de Barcelona ",1,Gabibaskes,,,
Gallery of Babel ,http://hackupc2017f.devpost.com/submissions/78735-gallery-of-babel,"Main idea

Our main idea was to create something that could compute all the possible possibilities of a rgba 128x95 image. There are 256^(4*128*95) different possible images... That's a lot.

What it does

A simple website where you can explore the image babel library of the rgba images of dimensions 128x95. You can take a webcam snapshot or upload an image and find it in the library. There's also the possibility of writing a message in any image so you can leave a tiny footprint in the immensity.

Challenges we ran into

The search algorithm of an image given its base64 representation and finding a way to represent a grid of the nearest images.

What's next

Doing it with 4K images and storing every possibility in a server... Joking. Sleeping is what's next!
",,https://github.com/tarasyarema/hackupc2017f,,,"javascript, html, css, php",University of Barcelona,,,tarasyarema,"Universitat de Barcelona, University of Barcelona",2,M315,lanzablue,,
TripScanner,http://hackupc2017f.devpost.com/submissions/78738-tripscanner,"Inspiration

We love travelling, but sometimes it needs a lot of time to prepare for the trip. You should find flights, hotels, events' tickets. It took a lot of hours!

What it does

We created an application called TripScanner. It analyses your interests on Facebook and creates trips right for you. Do you love Maroon 5? Nice, TripScanner creates a trip to visit Maroon 5's concert. 

How we built it

We created an iOS app using Swift 4. Backend was created using Python 3.5 and Django. All algo part also was created using Python.

Challenges we ran into

The biggest challenge was to create an interactive map in real-world environment using ARKit. Unfortunately, we haven't managed to do it.

What's next for TripScanner

The next goals are:
1) Analyse more interests to create a better experience
2) Manage to do the ARKit map.
",,https://github.com/mashaka/TravelHelper,,"Skyscanner challenge, Amazon Web Services - Best Use of AWS","python, django, swift, ios, xcode, sketch, photoshop",Moscow Institute of Physics and Technology,,,adanilyak,Moscow Institute of Physics and Technology,2,mashaka,ryad0m,,
HackUPC-Fall17-Warriors-Team,http://hackupc2017f.devpost.com/submissions/78739-hackupc-fall17-warriors-team,"HackUPC (Fall-2017) Warriors team's repository.

Project members: Josep Castell Queralt, Sergio Hilario Martínez Mateu, Alejandro Molero Casanova, Daniel Salgado Rojo

About us

We are a group of physicists and mathematicians that have a solid background in mathematical modelling. We started this HackUPC without previous knowledge on software development, java language or the plataform Android Studio. Despite this, our objective when we joined the HackUPC was to learn how to develop a mobile app.

Project description: Android app ""MemoHack""

Motivation and objectives

Our objective (at long term), is to develop an app were you can build libraries with words or concepts, along with their corresponding definitions or any brief description. For exemple a biologist could build a library with a bunch of proteins, and their respective chemical composition.

What is new is that our app will help the users memorising or studying all the information accumulated in their libraries by periodically sending push notifications inquiring about some randomly chosen words previously saved in the library (and thus reinforcing the learning of those concepts). One of the major strengths of the implemented system is that it doesn't even require the user to open the application in order to submit the answer, since the application implements a direct reply system. 

Our idea, is that users could share their libraries in order to build a platform where people could help each other studying diverse areas of knowledge. For example a law student, could build a library with laws while studying for his/her exams, and use the app to memorize them, and then share its library to help other students. 

In the long run, the idea is to build an open platform where the app is integrated, providing every user with a fully personalised study support. This could be used in a wide number of knowledge fields: Vocabulary of a foreign language, proteins and its chemical composition or properties, physical laws, theorems, historical events, list of functions in a certain code language...

Delivered demo

Of course, accomplishing all the objectives mentioned above in an only hackathon was beyond our possibilities. Instead, what we did is a proof of principle of how the app would work. Using Android Studio, we have developed an Android app where you can build your own library of words along with their corresponding definitions/translations. The app records this information, and periodically sends a push notification asking the user the definition/translation corresponding to one of the words saved in the library. Thus, the main function of this app is helping to remember those tricky words that we confuse or forget.

Version 1

Test version of the MemoHack where notifications appear via a button click.

Version 2

Final beta version of the MemoHack where notifications appear sporadically.

Most straightforward further developments


Punctuation/recompense system
Library editing
Configurable settings (frequency of the notifications, library choosing, etc)


License

Unless otherwise stated, all material is licensed under a  Creative Commons Attribution-ShareAlike 3.0 License (https://creativecommons.org/licenses/by-sa/3.0/). This means you are free to copy, distribute and transmit the work, adapt it to your needs as long as you cite its origin and, if you do redistribute it, do so under the same license.

References


The app implements a direct reply notification system obtained from: https://github.com/segunfamisa/android-nougat-notification


Acknowledgements and hackathon experience

We would like to thank the HackUPC organizers, sponsors and volunteers for this experience. We have learnt a lot from the hacking and coding world, as well as some java programming language and how to use the Android Studio environment. We enjoyed this experience a lot and we hope to repeat it in the future.

Thank you! 

Warriors Team
",,https://github.com/SergioHilario/HackUPC-Fall17-Warriors-Team,https://s3.amazonaws.com/challengepost/zip_files/production/25924/zip_files/MemoHack2_2.zip,"Itequia challenge, Thoughtworks challenge, Bloomberg challenge","java, android-studio, android",Universitat Autònoma de Barcelona,,,SergioHilario,"Universitat Autònoma de Barcelona, UAB",1,DanielSalgadoRojo,,,
"Wakr, oversleep for good",http://hackupc2017f.devpost.com/submissions/78740-wakr-oversleep-for-good,"Inspiration

Let’s face it, waking up is tough in the morning can be tough sometimes. This is why we have taken a spin on the classic alarm clock. We’re proud to introduce Wakr, the alarm clock for the social good.

What it does

Wakr is an alarm clock that aims to help you wake up in the morning in a different way. First, you place a coin before going to sleep on it, go to sleep and wait for the next morning. If you don’t wake up when the alarm sounds, an arm will reach to your money and keep it away from you until you complete a 21-day challenge without oversleeping. On the other hand, if you don’t leave money on the tray, a fixed amount will be donated to your preferred NGO. 
Wakr has a built-in “shame mode” that donates the money you’ve accumulated to your NGO if you open the case before reaching your goal.

How we built it

To build Wakr we haveused everything we had, hammers and saws, stepper engines, JavaScript + JQuery, Go Language and Python for the programming, Photoshop and Illustrator to design the UI.

Challenges we ran into

We ran into several challenges while developing and deploying the project. First of all, hardware, hardware, hardware. Getting your hands dirty implies tackling different obstacles, from engines that don’t turn to running around the city to fetch last-hour materials. We also faced design challenges while developing Wakr that had been solved on the go.

Accomplishments that we are proud of

First of all, we are proud of submitting the project on time, developing a piece of hardware always adds a layer of complexity to the problem. Managing to setup everything has been a challenge. We are also proud of being able to work together under pressure without having any internal problems.

What I learned

Prototyping techniques, consolidated web design fundamentals, mechanics.

Built With

Go, JavaScript, Python, Photoshop, Illustrator, HTML, CSS, Raspberry Pi

What's next for Wakr?

Full product development that would be a true asset for NGOs across the globe. Implementation of further gamification techniques and the feature of integrating it with your preferred social media platforms.
Integration with AI that will wake up the users at the best possible time tracking their sleep routines and brainwaves. 
",,https://github.com/cjf93/wakr-server,,,"golang, javascript, raspberry-pi, photoshop, python, html5, css, jquery","UPC, EADA, UPF",,,cjf93,UPC,3,nov1kk,dtd93,adiaz,
Personal Responsive WordPress Website,http://hackupc2017f.devpost.com/submissions/78741-personal-responsive-wordpress-website,"MHacks Nano was my chance to learn more about new technologies (I am looking at you, Grizz Hacks Live Stream!) and build my personal website to showcase my portfolio to clients. Although it's not complete, I think I built a pretty good portion of it in the last five days.
",,http://cesare.io,,,"wordpress, html5, css3, php",Università degli Studi di Milano-Bicocca,,,CeceXX,Università degli Studi di Milano-Bicocca,0,,,,
A New Sense,http://hackupc2017f.devpost.com/submissions/78742-a-new-sense,"Inspiration

How can we solve a daily challenge for millions of people? In the world, there are 285 million visually impaired individuals. Their most common fears are going out on their own, getting lost and an overall sense of vulnerability. The white cane, the guide dog and voice-controlled apps provide a great help, but have limitations.

This is why we created A New Sense

What it does

A New Sense allows visually impaired people to get an improved understanding of their surroundings through haptic feedback. The device can be worn on the hand as a complement to the white cane to spot objects that would otherwise go unnoticed. It can also be used as a substitute for the cane in places where using a cane would be cumbersome, such as at social gatherings. 

How we built it

We used a miniturized Arduino board (Nano) as the logic processor and a SR04 Ultrasonic sensor to receive information on the distance to objects. We stitched these core components together using a prototyping board and some resistors and transistors. We then created an Arduino program using the C/C++ Arduino framework that was able to regulate the intensity of vibration of a small cell-phone motor. 

Finally we attached the prototyping board to a platform that could be attached to the hand of a user, similar to a ring.

Challenges we ran into

Our initial goal was to use a customizable PCB board instead of the prototyping board we ended up using. Having that would have allowed for a smaller footprint of the electronics, as well as a thinner design. The reason for why we had to change our plans was that the soldering iron we had turned out to be too powerful, melting the customizable PCB board we had bought. 

Accomplishments that we're proud of

We were able to create a feedback function that allows the user to accurately predict how far away objects are with minimal training. This was only possible after a lot of tweaking, and testing. 

What we learned

Murphy's laws are to be respected, and expected. The thing you thought would be the main challenge of the project can turn out to be easy to implement, while something seemingly trivial will have you sweating for hours. 

What's next for A New sense

The functionality of the current prototype will be minuturized, and the algorithms further refined based on feedback we get from people with visual impairment. 
",,http://newsense.strikingly.com/,,,"arduino, c++, hardware","Royal Institute of Technology (KTH), Universitat Politecnica de Catalunya",,,TheBarrel,Royal Institute of Technology (KTH),1,jcllobet,,,
Adventure Button,http://hackupc2017f.devpost.com/submissions/78743-adventure-button,"How it came about

We were thinking about the contexts in which we could see ourselves using, and could remember having used the skyscanner service. The one that stood out the most was for the impromptu organisation of group adventures. 

Usually by the time people think it's a good enough idea to look for tickets they're:


too drunk to come to a decision
too sober to commit to their flights the next morning


The adventure button obliges its users to commit with a binding pact and forces the decision of a location whilst leaving it in the hands of the users.

You'll get a better idea of this by watching out our video demonstration (the password is ""devpost"").

It's been padded by about 9 minutes by the video editor, but the guy with final cut is sleeping so enjoy.
",https://vimeo.com/238249281,https://github.com/justinglibert/adventure-button-client,,Skyscanner challenge,"react, javascript, grommet",University of Edinburgh,,,dtdavies,University of Edinburgh,2,conrichu,justinglibert,,
oscar,http://hackupc2017f.devpost.com/submissions/78744-oscar,"oscar

About

Advanced analytics used easily in a conversation


Talk to your database like a human: We use advanced natural language processing techniques to create world class conversational experience
Get data insights like you never did before: It’s never been so easy to identify factors that impact customers’ engagement and revenue.
Smart AI-based database understanding: No complex setup required 
It's never been so easy to get advanced statistics
Inside your favorite messaging app: One-click integration with Twist gives you more time to do stuff that matters.


Tech

TL;DR Stackshare

Our app consists of four main parts:


Backend; Here we use microservice based approach with services build using Golang and Python. 
DevOps; We use AWS EC2 as our infrastructure provider. All our microservices are running using supervisor to provide demonization and easy restart/logging access. We use AWS Route53 for DNS related things. Every app is running behind nginx reverse proxy. 
AI; We use two frameworks. CatBoost for Python implementing gradient boosting on decision trees with a native support of categorical features and GoML for Golang to perform sentiment analysis via Naive Bayes classification.
Frontend; We have build responsive landing page using ES6/Bootstrap/jQuery

",,https://plentsov.com,,"Doist challenge, Amazon Web Services - Best Use of AWS, Bloomberg challenge","jupyter-notebook, python, css, html, javascript, shell, go, catboost, machine-learning",Higher School of Economics,,,plentsov,", Higher school of economics",2,ALKONDR,d3sire,,
BTC Carbon,http://hackupc2017f.devpost.com/submissions/78745-btc-carbon,"Inspiration

Bitcoin and other blockchain-based applications have been a hot topic recently, but many people do not consider the environmental impact caused by one of the core mechanisms which keeps the network running: mining.

What it does

Carbon BTC is a simple webpage which displays the current average network hash rate, and uses this to estimate the current network energy consumption. It then calculates the carbon emitted in the generation process of the electricity required for this level of energy consumption.

Caveats

The network hash rate is estimated and pulled in from blockchain.info. There is no way to know for certain the exact hash rate. Similarly, the energy consumption is also an estimate, based on the hash rate and energy consumption of the Antminer S9 mining rig. Energy efficiency of different miners will vary, so this is the biggest margin for error.

The carbon emitted for generating electricity is based on the UK grid, and as all miners aren't based out of the UK, this will likely be hugely inaccurate.
",,https://spru.sr/btc-carbon/,,"GFT challenge, Everis challenge, Bloomberg challenge","javascript, bitcoin, blockchain, carbon-intensity","Aston University, University of Birmingham, University of Sussex",,,sprusr,"University of Birmingham, university of sussex",2,ObsidianEagle,Bigmambo,,
How Many T-Shirts Do MLH Need? (.com),http://hackupc2017f.devpost.com/submissions/78747-how-many-t-shirts-do-mlh-need-com,"Inspiration

MLH don't have enough t-shirts. We reminded them.

What it does

It reminds MLH about t-shirts. 

How we built it

Pain. (going through hackathons and finding how many people went to it last time)

Challenges we ran into

domain.com being a snake

Accomplishments that we're proud of

We might make a difference to MLH. Maybe.

What we learned

Don't trust the back of a line

What's next for How Many T-Shirts Do MLH Need? (.com)

Keep updating how many t shirts are required I guess. Also branch out into wheresmymlhhardware.com
",,http://geoking.me/mlh,https://s3.amazonaws.com/challengepost/zip_files/production/25925/zip_files/howmanytshirtsdomlhneed.com.zip,Best Domain Name from Domain.com,"html5, css3, html, css, love, pain, anguish",Aston University,,,geoking,Aston University,2,Brandinio,beniusij,,
Easytravel,http://hackupc2017f.devpost.com/submissions/78748-easytravel,"Easytravel

A fantastic  Telegram bot to get update about travel offerts.

Wen you start our bot, he will aks your position and than you can select the airports near you. We will serf into the Internet, through to the skyscanner API, for you! Ad notify you when we will found  the cheapest solution for the weekend.  

@hackupc_test_bot have fun
",,https://github.com/Nittarab/skyscanner_bot,,,javascript,University of Trento,,,Nittarab,trento,0,,,,
FlightJumper,http://hackupc2017f.devpost.com/submissions/78749-flightjumper,"Inspiration

One of the main issues with the current SkyScanner app is the fact that you can't currently check to see on a map where it is you want to go. The website does this pretty perfectly, but the app is very centred around a user knowing most of the information about their holiday before entering the app. This fixes that.

What it does

Essentially, FlightJumper brings up a map for you to click on which, once clicked, finds the cheapest flights in that country and lists them in airport-order (starting with cheapest). This means that a user is one tap away from finding out how much it'll be to get to somewhere on their bucket list, and two taps away from being redirected to a provider preparing to give them that holiday.

How we built it

We started by drawing mockups of exactly how we wanted the app to work. We then decided the next step was getting the Google Map API as well as the SkyScanner API and researching around Android development (since we're pretty new at it). Once we had a basic map displayed, we tried to make the app as close to our mockups as possible, by incorporating the SkyScanner API and making our dream app a reality.

Challenges we ran into

Unfortunately, the shear complexity of mixing two different complicated-enough API's was difficult in such a time-limited environment. Although we feel like we've worked hard with the resources and knowledge we have, doing this again would probably mean we would have more time to incorporate better features.

Accomplishments that we're proud of

Getting a working app up and running from a group of limited Android knowledge has been impressive, and it's been a joy to see whenever mini wins (like getting the SkyScanner API up in Android, seeing the Google Map API working for the first time and more) happen.

What we learned

We learnt a hell of a lot, and look to employ this into everyday life in our development careers (specifically around Android development).

What's next for FlightJumper

Next up, we hope to fully incorporate user preferences into the app, rather than assuming most of the information for a user. Things like multiple people, different dates etc are still needed.
",,https://github.com/geoking/flightjumper,https://s3.amazonaws.com/challengepost/zip_files/production/25926/zip_files/FlightJumper0.1.apk,Skyscanner challenge,"java, html5, css3",Aston University,,,geoking,Aston University,2,Brandinio,beniusij,,
Skysurprise,http://hackupc2017f.devpost.com/submissions/78751-skysurprise,"Inspiration & What it does

We all love to travel. And tools like Skyscanner make that a lot easier for us. Recently Stephanie went on a surprise trip all arranged by her friend, but the friend took a lot of time to arrange it. That is what we want to change! By using Skyscanner we can easily generate a flytrip (roadtrip with planes) within your budget and time schedule.

How we built it

Backend was Django with REST. Frontend was a webapp using AngularJS.
We used the Skyscanner API for all flights and hotel information.

Challenges we ran into

We've found that doing multiple hops within a certain budget is difficult to do. Or you can be way over budget, or you will only generate one hop. This needs to be improved in the future. Also, some regular programming bugs are still present.

Accomplishments that we're proud of

The spinning globe :D

What we learned

The backend team had never done backend before, which was quite a challenge for them. Through this hackaton they did learn a lot in a short amount of time.

What's next for Skysurprise

Flying away to an awesome flytrip!
",https://www.youtube.com/watch?v=1WWItY-4kcc&feature=youtu.be,https://github.com/tobiascornille/skysurprise,,Skyscanner challenge,"django, angular.js, html5, css3, javascript","University of Ghent, University of Leuven",,,StephanieVanLaere,"Ghent University, KU Leuven, KULeuven",3,JanVermeulen,tobiascornille,ProLoD,
Health Card,http://hackupc2017f.devpost.com/submissions/78752-health-card,"Inspiration

Blockchain

What it does

Health Card is an application built on top of blockchain technology that provides means of creating an electronic health card that can be trusted. System currently supports 2 roles. Patients can create their own card which acts as a ledger of various medical records and at the same time as an access log. Doctors can be granted access to the patient's card and create new records. System allows doctors to view any card in case of an emergency. Each operation on the card is logged within the blockchain and is visible to the card owner. The system ensures that crucial medical data such as prescribed drugs, undergone medical procedures or medical conditions are available when they are most needed and thanks to blockchain they can be trusted to be correct.

How we built it

To complement blockchain distributed nature we diverged from the initial traditional backend server concept and decided to try out serverless architecture with Firebase and cloud functions. Blockchain logic is built on top of Hyperledger fabric. Medical data can not be due to legal reasons stored within the blockchain so instead it contains references to data holders (e.g. hospitals) and their checksums. Unfortunately we did not have enough time to fully finish the app due to complicated design process.

Challenges we ran into

Each country uses different legislation when it comes to just about anything, health included. Applications like these has to be either fine tuned to specific legislation or can not contain all that is necessary. We tried to think about it on a world wide scale, because patients are at risk of being wrongly treated or treated late when they are abroad, where doctors do not have immediate access to their health data. This proved to be a huge challenge from the design standpoint. From the technical point of view, most of our team used technologies they were unfamiliar with, especially the blockchain itself.

Accomplishments that we're proud of

Functional blockchain implementation (unfortunately it is not yet integrated into the system)

What we learned


blockchain (duh)
better understanding of all the technologies that we used


What's next for Health Card


connect application with the blockchain
polish the design, add new roles into the system such as professional athlete, legal guardian, hospital etc.
concept can be tested on system regarding pets (patient=pet, doctor=veterinarian, legal guardian=pet owner)
connect the system with various APIs such as RxNav API, which is an API for drugs and medication. It can be used
to check doctor's prescriptions whether new medication does not interfere with current medications in a dangerous 
way.

",,https://github.com/flowup/hackupc17,https://s3.amazonaws.com/challengepost/zip_files/production/25927/zip_files/healthcard.zip,Everis challenge,"angular.js, firebase, blockchain, node.js, go, auth0",Brno University of Technology,,,lukslouka,"Brno University of Technolgy, Faculty of Information Technology Brno University of Technology , Brno University of Technology",3,auchytil,gelidus,kubaj,
Minosii,http://hackupc2017f.devpost.com/submissions/78753-minosii,"Minosii

Nowadays, most remote control are still based with old buttons and joysticks. It is time to use more intuitive, fun, and safe remote. The type of remote controls are to be taken seriously because they are very important in certain applications such as dismantling bombs, managing hazardous elements, flying drones,...

Minosii aims to provide a way to substitute traditional remotes by the use of multiple accelerometers and gyroscopes.

To realise this project, we used:


2x 9-axis sensor (Gyro + Accelerometer + Compass) : MPU9250
1x microcontroller : Arduino Micro
1x transceiver : nRF24L01


The module on the wrist consist of a microcontroller, a transceiver and the 9-axis sensor used as an axis reference. The 9-axis sensor remaining is on the fingertip. 

The principle of the protoype is quite simple, the microcontroller reads the value of the two 9-axis sensor and process those value to generate a 3D model of the movement. A simplification of that 3D model is then sent via the transceiver.
",,https://github.com/bendebled/hackupc-Minosii,,,arduino,"UPC, University of Mons (UMONS)",,,tuxben,"University of Mons, UPC",3,KevinSaccoGhini,Carlos_March,davidsangal91,
VisuaDiary,http://hackupc2017f.devpost.com/submissions/78754-visuadiary,"Inspiration

The team decided we wanted to use our hack time to it’s full potential and to do this we felt approaching the weekend with an altruistic attitude allowed us to do this. The idea was actually a mixture of a few other ideas we were discussing and we felt we could incorporate bits of these ideas to create a thoughtful and useful application.

What it does

VisuaDiary is an application built primarily with the aim to help people who suffer with conditions such as Alzheimer's and Dementia in coping with some of the symptoms such as loss of memory. This application allows a user to maintain a diary of meetings with family and friends and through use of facial recognition can simplify the process of identifying who they were with. They can also, at any time, see their friends and family listed in the app if they want reminded of them.

How we built it

Together we built VisuaDiary using Android and Amazon Web Services (AWS). The main languages used were Java, XML, PHP and MySQL. We built an application programming interface (API) to connect AWS to the mobile application. Simple storage service (S3) is used in storing portrait images of the user, friends and family. Amazon provides a powerful machine learning / artificial intelligence API for image recognition called Rekognition. 

Challenges we ran into

We ran into issues making our service solely built using AWS - our experience with DynamoDB forced us to move to use MySQL. Utilising new technologies and learning them as we were developing our idea proved to be rather time consuming. Initially we spent more time than we anticipated in selecting a challenge to tackle which put more of a time constraint on us.

Accomplishments that we're proud of

We were able to comprehend and build a complex application using various APIs. This resulted in our team working collaboratively to link up the various services to form the product. 

What we learned

Increased our understanding of AWS, API usage and improve general coding, team working and project management skills.

What's next for VisuaDiary

We’re looking to enhance and tailor the app further to make it more useful and easy to use and support as many people as we can.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/25939/zip_files/visuadiary.zip,"Amazon Web Services - Best Use of AWS, Bloomberg challenge","rekognition, php, amazon-web-services, android, java, mysql, amazon-ec2, simple-storage-service",Robert Gordon University,"Domain.com,Amazon Web Services",,ljfisher,Robert Gordon,2,ChristinaMoir,fraserbarclay,,
Felynder,http://hackupc2017f.devpost.com/submissions/78757-felynder,"Inspiration

David had a Skywriter and we wanted to do something cool with it. 

What it does

Skywriter's input is processed in Python, and gesture information is broadcasted through sockets. The JavaFX client then receives gesture events and updates the UI accordingly. It uses theCatApi.com for cat images. 

How we built it

David wrote the Python server on the Raspberry Pi. Oktay built the JavaFX UI and API integration and Bianca wrote the client socket implementation. 

Challenges we ran into

Our original idea was to make an AR app that displays a holographic UI over the Raspberry Pi. After looking at a bunch of AR libraries, we found that we either needed to have experience in OpenGL or Unity in order to pull this off. After a while, we decided to settle with something simpler. 

Accomplishments that we're proud of

We all built important parts of the project, and each part required us to learn something new. Connectivity with the Raspberry Pi proved very difficult since it didn't have Bluetooth or Wifi, but we finally managed to connect. We had a lot of fun building this app, and we hope you do too. 

What we learned

We had a big idea that we couldn't possibly do within 36 hours, but breaking it down helped us accomplish at least some of it. 

What's next for Felynder

We're hoping to expand the platform and develop the AR app as well. 
",,,,Bloomberg challenge,"python, java, raspberry-pi, skywriter",Edinburgh,,,MrHappy,University of Edinburgh,2,bibsss13,dsearle2,,
Civic gaming,http://hackupc2017f.devpost.com/submissions/78758-civic-gaming,"Inspiration

In every body's day to day life there are certain thinghs that result unappealing, molest and improvable for everybody. Civic gaming attempts to improve this situation throught the use of a potentially huge database and tempting prizes and unlockable features.

What it does

Throught the use of a flexible mobile phone game and a large database Civic gaming connects two parties, as for example sellers and costumers or city hall and citiziens (we focused on the second ones during our project development) and gives the to the seconds tools under the appearence of a mobile phone game that will allow him/her to give his/her opinion about some improvable situation thus helping the first to improve their services  and even use the players feedback as a real time font of data that could help them save money by reducing the disponibility of a certain service  that doesn't seem to bee needed at the moment.

How we built it

In order to build it we have used opentrends-api to build our database, Python to perform simulations of the effects that a variable size of players could have on a certain service and the server's software and C++ transported to android by using cocos2d to build the actual game. We also used  postman to try the opentrends-api.

Challenges we ran into

We had a lot of difficulties trying to connect to opentrends-api and using it at the point that at the beginnning and after 14 ours of failed attempts we feared we would wouldn't even submit our project. We also had a lot of problems transporting the C++ code to cocos2d.

Accomplishments that we're proud of

We made it through even last minuts problems and finally submitted a flexible very app that results very easy to the eye and we strongly believe that can be very usefull if used properly.

What we learned

We learned a lot about comunicating with a database on a cloud and modifiying it, wrapping Python or bash in other lenguages and some of us even experienced the world of coding for the first time.

What's next for Civic gaming

The simulation should be translated to C++ and renderized in order to be able to generate simulations more complete and realistic simulations and new features should be easily added to the game. It would also be necessary negotiations with entities disposed to use the apy in order to agree on a set of real prizes that would make the game more appealing.
",,https://github.com/JoeFonzarelli/HackatonUPC2017.git,https://s3.amazonaws.com/challengepost/zip_files/production/25931/zip_files/HackatonUPC2017.zip,Opentrends challenge,"c++, python, opentrends-api, tears-sweat-and-lots-of-cafeine, android, cocos2d","Universitat Autònoma de Barcelona (UAB), Universitat Politècnica de Milà (UPM) i  Escola de Noves Tecnologies Interactives (ENTI)",,,PraderioM,enti ub,2,horveljunior,GiuseppeSanseverinoValverde,,
Readist,http://hackupc2017f.devpost.com/submissions/78759-readist,"Readist

Readist is our take on two challenges for this edition of HackUPC:

First of all, as we proved last season we love computer vision so we took the Itequia challenge in an attempt to keep exploring this world (this time with machine learning an very powerful tools!). But as it stands pure text transcription is a bit raw for the end user, that's why we've decided to combine this tech with Twist. A tool that turns blackboard and sketches into edible rich text fits perfectly in an environment designed for remote workers and decentralized businesses.

So, what did we do?

We have used the Microsoft Azure, a powerful cloud platform with neural network that recognizes text in an image. Our task was deploying that software and making the text edible and with easy access from an html document. We have to say that this is a very powerful tool and it made itself easy to pilot, 10/10 would code again!

On the other hand, the Twist implementation was a huge challenge. Without any knowledge on web apps or back end we tried to set up from the ground an Amazon Web Service Lambda Function (a serverless solution for a web app). All of that to make us able to, through the Twist Zappier integration, fetch your images in a thread on any channel and send them to the cloud to come back as clean, formatted (and formattable) text.

And of course, the glue that keeps this pieces together our beloved Python.

We learned a ton during this hard project and although we know the boons of machine learning aren't perfect (yet) we sincerely hope you enjoy it!
",,https://github.com/RaquelLeandra/readist,,"Doist challenge, Amazon Web Services - Best Use of AWS, Itequia challenge","html, python, machine-learning, azure",Universitat Politécnica de Catalunya,Amazon Web Services,,RaquelLeandra,,1,didac,,,
SmoothServe,http://hackupc2017f.devpost.com/submissions/78760-smoothserve,"About

The family of one of our teammates owns a restaurant, and they use software to work with the waiters and the kitchen. But that software is proprietary, out of date, has an ugly UI and is not really user-friendly. So we decided that it would be a good idea to take that concept and make a better version of it.

This is SmoothServe

Smoothserve is an opensource software which is designed to be used in restaurants or bars.  It has a really intuitive and clean UI, based on a Firebase database so you don't have to be refreshing the page constantly. It improves the workflow of the business by communicating the waiters with the kitchen in a real-time and cross-platform environment.

The Challenges we faced

We decided to change our idea when there were just 25 hours left. This was because we noticed that the idea that we were going to do was already implemented on Facebook, so it was a nonsense trying to compete with their app. So then we came up with the idea of Smoothserve. So believe it or not, it was such a loss of time having to change our whole idea to something completely different.

It also was the first time we were working with Firebase, and as well the first time we were doing ""Backend"". So we had to learn it all from scratch, which was quite a challenge yet so fun.

Acomplishments we're proud of

We had managed to set up a Firebase database and work with it in a real-time updating environment even we had never worked with something like this before. We are also proud of the clean and beautiful UI that we had made.

What's next?

We would love to introduce all the features we have in mind for this app so we can keep on helping the restaurants improve their workflow. And of course, we want it to be OpenSource forever! <3.
",,https://github.com/LewisMazzei/SmoothServe,,Thoughtworks challenge,"javascript, css, html, firebase, semantic-ui, node.js, font-awesome",UPC,,,hialvaro,"UPC, University of St Andrews",2,LewisM,mauriciabad,,
Car Radar,http://hackupc2017f.devpost.com/submissions/78761-car-radar,"Car Radar

We assist in tracking and finding stolen vehicles.

Our mission is to increase the rate of success during search for a stolen car, bike or bicycle. We want to achieve that by encouraging car drivers around the world to participate in our smart network that uses advanced machine learning techniques to recognize license plates and match them against our database of stolen vehicles which is maintained by our end users. Drivers can install our hardware into their cars and assist in finding stolen cars. We make use of Raspberry PI for this. We provide attractive bonuses for lucky drivers which were able to spot license plates from our list of stolen vehicles.
We can provide sticky numbers for bicycles as well, since they typically do not have recognizable numbers.

Used technologies

license plates detection technology: https://github.com/openalpr/openalpr

Our system consists of three main components:


Raspberry Pi client for processing raw footage from a dash cam.
Web and Android clients for end users that helps you search for stolen vehicles 
Backend for processing requests and database maintainance


Raspberry Pi client

Allows to use internal/external webcam api to get videostream for future processing. For image processing we use modern technique, based on neural networks image recognition. License plates found on processed images are then transferred to backend server.

This should make use of street and road cameras, which are already used for different purposes in many cities around the world and are becoming even more wide-spread. 

Web and Android clients

Client application for people, who got their cars stolen. We understand, that it is really important to do anything possible in a shortest period of time after theft, so our apps is user-friendly and extremely simple to use. You just need to enter your license plates and personal document data (for security), and we immediately start searching for your car. When it is found, you will be notified in an app and via email.

In our world mobile applications are taking more and more of people's lives. So we believe mobile application is the best way to provide service like ours. 

Backend

This part of our system is responsible for data storage and notification of our beloved end users!
We keep all the observed license numbers in order to be able to handle the future query.
We maintain the license number along with the last observed location (longitude, latitude) on the map. Therefore the user can get a clue on the possible location of the stolen vehicle by seeing the latest position. The user can subscribe for the future matches as well in case our system still has no information about it so he never misses his stolen vehicle.

Future work


Security support. It is very important part of our service, as nobody wants anyone else to see their property on the map. With access to official database of vehicles our service will become 100% secure and reliable.
Nowadays many drivers have DVR in their cars. Many of these devices work on Android. We plan to release Android API which should allow to use DVRs as video streaming devices. That would let us get thousands more relevant images of vehicles. Imagine, how higher will become the chance to find any stolen one!
Car model, color, etc detection: this will improve finding accuracy and help people recognize their cars on images.
Drivers loyalty program. We believe, that every good deed should be thanked. And we are really thankful to all the people, who let us use their devices to help others find thieves, so we want give them something back. 

",https://www.youtube.com/watch?v=9e_qvt8Qh5k,https://github.com/standy66/hackupc2017f,https://s3.amazonaws.com/challengepost/zip_files/production/25930/zip_files/hackupc2017f-master.zip,"Thoughtworks challenge, Opentrends challenge","java, python, css, html, javascript",MIPT,,,Atmyre,"Moscow Institute of Physics and Technology, MIPT, Moscow Institue of Physics and Technology",3,standy66,VladX,penguin138,
ConstructABetterSociety,http://hackupc2017f.devpost.com/submissions/78762-constructabettersociety,"ConstructABetterSociety

The idea of the project is to unify the citizens to help each other, giving them a tool that is capable of getting real time comments and opinions of any populate zone in a city. The app is going to give this comments to the other users as real time news using a reward based system.

The reward system

Giving a point for each new comment and taking a point for each requested information. This is the way the app makes users feel better when collaborating and the way we assure we can mantain a little bit of information on date.

The ranking system

Each user has a global rank, and for each comment that the user does, the others can rate it. This way the users know if a comment is real or fake, because of a users rank.

Reports

Each user can report other users. When a comment is not valid, or troll, a user can use the option report to notify for this incidence.
",,https://github.com/mrg20/ConstructABetterSociety,https://s3.amazonaws.com/challengepost/zip_files/production/25932/zip_files/githubLink.,Thoughtworks challenge,"html, javascript, java, css",Universitat de Lleida,,,mrg20,"Universitat de Lleida, University of Lleida",3,Doasy,Isomorfisme,Guillem96,
FireFuzzer,http://hackupc2017f.devpost.com/submissions/78763-firefuzzer,"Inspiration

Fuzzing is cool

What it does

Attempts to fuzz stuff

How I built it

With love & care (alongside a lot of pain and a lot of hours debugging)

Challenges I ran into

Dynamic stack ¿pivoting? in order to run dynamic functions loaded from dynamic libraries in a dynamic SO.

Accomplishments that I'm proud of

IT WORKED.

What I learned

Asm sucks, IDA rulz, C++.... works

What's next for FireFuzzer

UDT parsing (User defined type, aka structs, classes...)
",,,https://s3.amazonaws.com/challengepost/zip_files/production/25933/zip_files/FireFuzzer.7z,,"c++, monster, redbull, ida-tool",UPC,,,ernilos,UPC,0,,,,
AlParca,http://hackupc2017f.devpost.com/submissions/78764-alparca,"Inspiration

Having the freedom of using the car without having to worry about parking spaces.

What it does

It visualizes cars parked across the city in real-time on Google Maps API. The current version uses simulated data as a proof of concept.

How we built it

Lots of love, coffee, coke, algorithm, programming and not enough sleep. 

Challenges we ran into

Setting up database, debugging JavaScript, attempting to get the Thingtia API to work. 

Accomplishments that we're proud of

We have simulated cars that move around in real-time, collecting data about available parking spots in Barcelona. 

What's next for AlParca?

This proof of concept will await era of smart cars with open data.
",,https://github.com/tenfoldpaper/alparker,,"Thoughtworks challenge, Opentrends challenge, Bloomberg challenge","javascript, css, html, node.js, google-directions","The University of Southampton, Jacobs University Bremen, City University London",,,Kanter,"The University of Southampton, Jacobs University Bremen",2,tenfoldpaper,CleliaCalabro,,
LeftLovers - Reduce food waste and enjoy leftovers!,http://hackupc2017f.devpost.com/submissions/78765-leftlovers-reduce-food-waste-and-enjoy-leftovers,"Inspiration

The origin of our idea was the need of having an overview of the different products in the fridge. But, leftovers and food waste are a more general problem. Having an complete overview over his goods in the fridge and/or in the store room are essential to consume them before it's too late. We provide a intuitive and easy accessible way to track your leftovers and goods. However, knowing the available items doesn't make themselves a nice meal. We help you to become a even better chief and  and provide provide you great recipes. Get out the most of your food!

What it does

Keeps track of leftovers that are conducted by barcode scanning, image recognition and manual recording. Shows an overview of the leftovers and suggests recipes for a user defined selection of them. In case of no preferences, random menus are displayed.

How I built it

We use react-native to provide cross-platform availability and support Android as well as iOS users. To record the goods and leftovers we use a manual input form, image recognition and barcode scanning. Our barcode scanning interface is built on the scandit api. We use Microsofts Vision services on Azure to do image recognition and categorise the items. In addition to these technologies we provide the users with a simple input form to manually record goods. We use the food2fork API to get access to a huge database of recipes. We use http requests directly from our client software.

Challenges I ran into

Cross-platform developing on Android and iOS. Using completely different API's of various services directly from the client-side. 

Accomplishments that I'm proud of

Running image recognition of food. Easy accessible and clean user interface providing real-time barcode scanning. Completely independent client software without any server backend. Integration of recipe data provider with a huge amount of different meals.

What I learned

Cross-platform development sounds nice at the first glance, but isn't that easy to do in the end. It's possible to develop a full working app without a heavyweight server in the backend.

What's next for LeftLovers


Use more complete barcode provider
Enable sharing of goods for shared flats and families (including a reservation system for leftovers)
Text recognition to add whole shopping receipts
IOT integration into fridge and shelves to make make out checking/removing items easier
Nutrition facts for menus and single items.
Rating and sharing of the best recipes with friends and family via social-media

",,https://github.com/bisfwe/hackUPC.smartFridge/settings,,,"react-native, azure, ios, android, javascript, es6, api, databases, data-providers, open-source",ETH Zürich,,,bisfwe,ETH Zurich,2,NorwinSchnyder,khayalan-mathew,,
What's out,http://hackupc2017f.devpost.com/submissions/78766-what-s-out,"Inspiration

In the beginning, we wanted to make an app to help people navigate the city, so, with Opentrends vision in mind, we decided to have a look at it.

What it does

The app detects what's the nearest Monument around you and displays how far are you from it. Once you get there, the app will show you some information of it.

How I built it

We build it for android using android studio. The app code is written in Java, and the database, using MySQL and PHP.

Challenges I ran into

We had almost no experience with databases, so it was quite a big challenge to connect the phone with it.

What's next for What's out

We want to add more Monuments to our database to make it more enjoyable.
",,,,Opentrends challenge,"java, android-studio, mysql, json, php",Universitat de Barcelona,,,Ralleg314,,0,,,,
DriveSafe,http://hackupc2017f.devpost.com/submissions/78767-drivesafe,"Traffic accidents happen because of drivers using phone while driving

What it does: Detects user context if one is walking, running, driving

How I built it : it was created using google context awareness api with location api

Challenges I ran into : testing of location based events and testing how location and context is changing requires going out frequently to test the gps input variations:P

Accomplishments that I'm proud of: created something deliverable while working alone

What I learned: Context Awareness Api and how it works and its limitations

What's next for DriveSafe: writing a backend server to send contextual data, which can be used for very useful applications and social transparency
",,,https://s3.amazonaws.com/challengepost/zip_files/production/25937/zip_files/DriveSafe.zip,ServiZurich challenge,"android-studio, java, location, context",uni-münster,,,thedawn786,uni-münster,0,,,,
Romualdo the social ChatBot,http://hackupc2017f.devpost.com/submissions/78768-romualdo-the-social-chatbot,"Inspiration

The inspiration of this project came up after a brainstorm of ideas that could interact with people to catch their attention, help, talk and entertain them.

What it does

This Chatbot can detect when someone passes in front of the camera and tries to catch their attention. If you had talked with it previously, it can remember your name as well as your face.

Challenges I ran into

One of the most important challenges we have faced was dealing with making a database for name remembering associated to an image which had to be stored in binary, linked to a name, which later had to be recovered to compare to the current user in front of the camera and determine if is was the same user or not.

Accomplishments that I'm proud of

Simultaneous face detection, face recognition with name association and conversation capabilities.

What I learned

I've perfectioned my knowledge in Python programming language, introduced myself to Opencv Library for live image object recognition and tracking, in this case we used it for face recognition to give it user interaction capabilities, with the use of a camera.

What's next for Romualdo

Further conversation improvements in fluidity and complexity, emotion detection and faster response time.
",https://youtu.be/HHxEgBvJt8c,https://github.com/crm-uam/Romualdo-HackUPC2017,,"GFT challenge, Thoughtworks challenge, Opentrends challenge, Everis challenge, Doist challenge, Itequia challenge, Bloomberg challenge, imaginBank challenge","python, opencv, arduino, azure",Universidad Autónoma de Madrid,,,ajrodriguez1,"Universidad Autonoma de Madrid, Univerdad Autonoma de Madrid, San Roman",3,CarlosGS,David-GF,Imartinn,
Etherocracy,http://hackupc2017f.devpost.com/submissions/78769-etherocracy,"Etherocracy

The aim of this project is to decentralize all the big events' check-ins, avoiding duplications, identity theft and other issues.

This project has been developed under the framework of the HackUPC 2017, Fall edition.

First Idea and Approach

The idea arose from a real-case scenario lived in Catalonia in October, when the public sites destined to host the Electoral Roll data were shut down.
Taking this idea and applying the BlockChain concept and technology, we focused on the development of a decentralized structure that could manage all the data needed for overcrowded events.

Possible Applications

The code provided can be applied in several situations, such as:


Verifying the legitimacy of an election roll
Cue-checking in crowded events as concerts, to avoid multiple attendees accessing with a unique pass


License

This project is licensed under the MIT License

Acknowledgments

HackUPC for providing us with the facilities and logistics to spend 36h of programming in a great environment
",,https://github.com/polmes/etherocracy,,"Thoughtworks challenge, Everis challenge","node.js, javascript, json, blockchain, html5, css3, ajax",Universitat Politècnica de Catalunya,,,polmes,Polytechnic University of Catalonia,2,Qjammer,jjb1996,,
SafeDrive,http://hackupc2017f.devpost.com/submissions/78770-safedrive,"Inspiration

The leading cause of death among 18-25 year olds is unintentional accidents, primarily caused by motor vehicle collisions. Also, Sciencing reports that carbon dioxide emissions from vehicles worldwide are a prime driver in global warming and climate change. SafeDrive aims to tackle both those issues by developing safe and sustainable driving habits, reinforced by personalised feedback.

What it does

SafeDrive takes your accelerometer data, as well as the collision avoidance technology (proximity detectors) and develops personalised driving reports With SafeDrive, you are given a score based on your driving performance and can compete with your friends and colleagues in pursuit of better and safer driving.

How we built it

MATLAB was used to develop a simulator that mimics your driving habits. The data generated from the simulation is pushed to ThingTia Cloud to be consolidated and stored. RubyOnRails backend makes use of the services and data provided by ThingTia and generates a score based on your performance. Lastly, the Ionic app delivers the information into a visually pleasing format for the user and allows them to see how they stand up with their friends and colleagues.

Challenges we ran into

One of the biggest challenges we ran into was using MATLAB to develop a simulator. We used the GUI platform as well as HTTP get and put requests which was outside the realm of our proficiency. In addition, the times between the backend and the ThingTia Cloud were misaligned which was discovered after a long time of bugfixing. 

Accomplishments that we're proud of

We are proud to have delivered a functional product that uses multiple different technologies and is directly aimed at a socially good cause.

What we learned

We learned just how much information cars generate, and how IoT has infinite possibilities stemming from the vast variety of sensors and IoT devices currently and bound to be on-board our vehicles. We learned about some unique features in MATLAB and how it is able to function well in a non-engineering related environment. 

What's next for SafeDrive

SafeDrive is aimed at using the accelerometer data, as well as data from car models, to generate specific carbon dioxide output values, to see the direct chemical impact our driving has on the environment. We also want to boost the social media aspect by using a Twist API.
",,https://github.com/mlichtblau/hackupc2017v1,,"Thoughtworks challenge, Opentrends challenge","ionic, ruby-on-rails, thingtia.cloud, matlab, angular.js","Hasso-Plattner-Institut, UCLA",,,MariusLichtblau,Hasso-Plattner-Institut,2,mistermh,bisbaldi,,
Spamify,http://hackupc2017f.devpost.com/submissions/78771-spamify,"Inspiration

To spam and annoy my friends

What it does

Send as many e-mails as requested.

How I built it

I have built it using Java and a library for sending e-mails.

Challenges I ran into

Finding the java library and learning to use it.

Accomplishments that I'm proud of

It works!

What I learned

Java library for sending e-mails.

What's next for Spamify

Find a way to avoid the spam ""wall"" of e-mail domains.
",,https://www.dropbox.com/s/n3f8rvnfcju8cy0/Spamify.rar?dl=0,,,java-and-mail-library,University of Manchester,,,e_r_k_a_n,Manchester University,0,,,,
HNotes,http://hackupc2017f.devpost.com/submissions/78772-hnotes,"Inspiration

What it does

It converts handwriting to HTML text with the help of Microsoft Computer Vision API in three platform

How we built it

Power was with us   

Challenges we ran into

Built synced applications to recognize handwriting images.

Accomplishments that we're proud of

What we learned

Time management is a golden rule.

What's next for hackupc-2017-ios

Need tests and stability tests.
",,https://github.com/kerimovscreations/hackupc-2017-ios,https://s3.amazonaws.com/challengepost/zip_files/production/25953/zip_files/hackUPC_2017.zip,,"swift, ruby, android, java, javascript, css, html, php, xml, mysql",0 point,,,KarimKarimov,Azerbaijan State Oil and Industrial University,2,JamilAlisgandarov,wamilomarov,,
Bookity,http://hackupc2017f.devpost.com/submissions/78773-bookity,"Inspiration ""Our love for socializing, reading, creating, coding and learning :)""

What it does ""It connects people that like reading in a serious and fun enviroment, allowing them to share experiences, recomendations and even exchange books!""

How we built it ""Combining the groups strenghs in every field, with passion and with love.""

Challenges we ran into ""The loveable bugs and the time we had, loats of ideas, not that loats of time ya know ;)""

Accomplishments that we're proud of ""Beating those bugs while also learning from them!""

What we learned ""teamwork is an important feat, that is necessary for correctly and efficiency building the app. Having to work with a deadline""

What's next for Bookity ""We are hyped with the outcome, so we will push it forward and make it even more awesome""
",,,https://s3.amazonaws.com/challengepost/zip_files/production/25942/zip_files/HackUPC.rar,,"java, xml, mongodb, node.js, android, math.js, machine-learning, api",UAB,,,vic-nes,UAB,0,,,,
HemisBot,http://hackupc2017f.devpost.com/submissions/78774-hemisbot,"IP 178.62.70.33

Inspiration

We think that cities work much better when everybody is contributing to the common wealth. The Hemis Bot is a easy-to-use web app that integrates different chatbots and allows its users to help each other in very diverse aspects of their daily lifes.

What it does

We have implemented four different chatbots with different functions:


Warn users about possible emergencies around them.
Find the nearest charging station for your electric car.
Stablish a communication between people that would like to exchange a book of their choice
Help tourists that have just arrived to Barcelona giving them the very basic information.


How we built it

The bots were mainly built with python and sqlite, while the web-app was done with html and css.

Challenges we ran into

We had to find an effective way of accessing the user ubication and transfering its data to the chatbot database.

Accomplishments that we're proud of

Without a very wide knowledge of the languages we were working with, we could build the whole structure of the program and run it successfully.

What we learned

We learned to make a chatbot and to program its interaction with the users

What's next for Hemis Bot

We'll see if we can add more functions through different chabots
",,https://github.com/ignasioliver/hemisbot,,"Thoughtworks challenge, Opentrends challenge, ServiZurich challenge, Bloomberg challenge","python, html, css",UPC,,,nilquera,"Universitat Politecnica de Catalunya, UPC",2,ignasi,Artagok,,
BeSafe,http://hackupc2017f.devpost.com/submissions/78776-besafe,"Inspiration

Smartphones have made it easy for us to stay connected anytime. But that can pose serious safety risks if someone decides to check his or her text messages, emails, phone calls, or any other mobile applications while driving. It’s really easy to get distracted by our phone and lose control of the car. But that’s not all of the bad things that can happen to us if we let our phone distract us, maybe you don’t lose control of your car, but while parking you hit a wall, or a tree, or the car of the front.

So what we wanted to achieve was the possibility to build an app to help the people of the world, and us of course, avoid their smartphones while driving.

What it does

The app lets the driver block different behaviours of his phone, he can earn points encouraging the good drivers to keep their practice. You can share your progress with your friends and invite them to prove.

How we built it

We chose to built the mobile app in AndroidOS, the WebPage, to monitor all the users of the, in Vue.js as frontEnd, as UI Framework we used Element.io, as bundling tool . And to get all the data and let communicate the web and the App we used Firebase.

Challenges we ran into

The integration of Firebase in Android, how to link different oAuth providers with Firebase, how to retrieve de data in Android, the retrieval structure maybe it’s not the best. Block all notifications, calls and other behaviours of the smartphone, some libraries were difficult to integrate.

Accomplishments that we're proud of

The teamwork and the time management. 

What we learned

We learned about Firebase, how it works, how it manages the data, firebase functions and firebase hostings, the steps that you must do to make it work with android or js. We also learned Vue.js an unknown JavaScript framework to three of us. Also a bit of android designing.

What's next for BeSafe

Finish the App, was difficult to solve all the problems we run into. More KPIs, and extra management functionality.
",,https://github.com/besafe-zurichhack/besafeweb,,ServiZurich challenge,"vue, firebase, android",UPC UPF,,,jmayore,"UPC, Universitat Pompeu Fabra",3,dominguezlosa,marcosPerezRubio,jmrp93,
Census,http://hackupc2017f.devpost.com/submissions/78777-census,"Inspiration

Census is inspired in the recent events in Catalonia where, between other events an unofficial referendum took place. From this, or rather what it didn't do well (it was centralized so the servers were took down and it didn't work most of the time, validation wasn't particularly secure, etc.) we designed a system that would have improved it.

What it does

Census makes use of the blockchain technology (used by bitcoin) together with an arbitrary census to validate the votes and regulating electoral fraud. This way, anyone can create a very secure poll with ease.

How we built it

We build this project on top of bigchainDB, a project which exposes blockchain's transactions with a system based on assets.

Challenges we ran into

The most daunting challenge we faced was the difficulty of using the blockchain technology for this, as it is not only a very young field but mainly oriented to economic transactions. Another difficulty we had to face was designing the system without using a regular database to save temporal data, so it can be cloned (as it uses blockchain instead).

Accomplishments that we're proud of

Being able to harness the blockchain system for something entirely different than what it was designed for is, in our opinion, something to be proud of. We had to use some witty workarounds and design patterns to handle the system so it worked as we wanted to.

What we learned

We learned the inner workings of blockchain transactions and how to use it to store data as if it were a database.

What's next for Census

Even though the underlying system works, the actual webpage is still incomplete, so having a fully working website (or app) would be a top priority for the project. Also, the ability to expand the system with ease should be looked into in the future.
",,http://35.157.161.130/,https://s3.amazonaws.com/challengepost/zip_files/production/25945/zip_files/big_chain_voting.zip,Everis challenge,"python, django, blockchain",Universitat de Barcelona,Amazon Web Services,,kanales,Universitat de Barcelona,3,rballeba,oelt16,gerardOrtega,
HackTeam,http://hackupc2017f.devpost.com/submissions/78778-hackteam,"Inspiration

Every hackathon, huge amount of participants face with problems of searching teammates and future managing these team, so we are trying to solve these problems by our app

What it does

At the entrance to the app, the user fills in a questionnaire about himself and chooses from two different scenarios. He can look for a team without an idea as a participant or create a team based on his idea. When user selects ""Creating team"", he fills the form with a description of idea and chooses necessary skills for his future teammates. Later the user is shown a visualised list of dossiers of all participants of a certain profession, where he himself selects his teammates, inviting them to participate in his team or not. If the user uses the participant's script (Searching team) without an idea, he simply waits for the invitation from the teams and selects the best one to himself. When the all processes is done, it is automatically creates a workspace into Twist

How we built it

During the brainstorm we created an idea which could help participants as us in the future hackathons. Djavid and Roman threw themselves backs into Android App development. In the same time Alex designed mobile front-end for our app and tried to make UX side of our project as comfortable for the user as it possible. Max was the thech guru. He built back-end part and a little bit of the web front-end part as well

Challenges we ran into

Exploring the Twist API was challangenging for us caused by its complicated architeture, design implementation took plenty of time because of unusual patterns used by our ui developer

Accomplishments that we're proud of

Unity and consistency inside our team

What we learned

Acquired speed programming technique, first AWS experience

What's next for HackTeam

We would try integrating our application in real cases such as our local hacks in Russia and may be in MLH realities
",,http://hack-team.azurewebsites.net/,https://s3.amazonaws.com/challengepost/zip_files/production/25951/zip_files/app-debug.apk,"Doist challenge, Amazon Web Services - Best Use of AWS, Best Domain Name from Domain.com, Bloomberg challenge","c#, .net, sketch, zepelin, azure, java, android, twistapi, amazon-web-services, firebase, sql, rest, retrofit, rxjava","NRU HSE, University of Tartu","Domain.com,Amazon Web Services",,Pomidorosos,"National Reaserch University Higher School of Economics, National Research University Higher School of Economics",3,Pomis,diakov2100,djavid,
TalkFork,http://hackupc2017f.devpost.com/submissions/78779-talkfork,"Inspiration

We use chats a lot and some of them are 100-200 people big. You have to deal with them because you don't usually know who would jump in into conversation. But when two or more conversations start simultaneously - better not discuss. 

What it does

We decided that we can tackle it by intelligently detecting this conversations and moving them to separate threads before it is too late. Our app also show some monitoring info-graphics.

How we built it

We use Django and TwistApp API to provide experience completely embedded into the Twist itself. Our clustering algorithm relies on user mentions and message semantic similarity (using NLTK, WordNet and SciPy). We use force simulation from D3.js visualization lib to show reasoning of the algorithm in real time.

Challenges we ran into

You know, error messages are often not so clear as we expect. We ran into some weird thing in Twist API and D3 and even had to look into code when documention was not enough.

Accomplishments that we're proud of

We did it! And also devised pleasant UX and good heuristics for similarity detections.

What we learned

How to use all those APIs, how to cluster data based on distance matrices. How to compare unstructured mess that is called ""chat messages""

What's next for TalkFork

We gave Doist feedback on API, asking them to allow integrations show their own UI and operate on messages more free. These would allow us to provide more streamlined experience. Also we see some ways to improve our detection algorithm relying on sentence structural similarity.
",,https://github.com/nzinov/talkfork,https://s3.amazonaws.com/challengepost/zip_files/production/25946/zip_files/talkfork.zip,Doist challenge,"python, django, d3.js, nltk, natural-language-processing, twistapp, doist, machine-learning, word-net",Moscow Institute of Physics and Technology,,,nzinov,Moscow Institute of Physics and Technology,2,IrinaGavenko,osopilniak,,
PickUp,http://hackupc2017f.devpost.com/submissions/78780-pickup,"Inspiration

We all enjoy playing Basketball and even though we don't want to play professionally and don't have enough time to join a professional Basketball club, we would like to play more competitively. So this app will enable players to play competitively without having to join an actual Basketball club. Using our app, you can play against your friends and people nearby, collect points and aspire to be the number one of your court. 

What it does

You can search for pickup games near you, you can create new games, join existing ones, check out the leaderboard of local courts and move up the ranks. Collect game points and unlock trophies within the app. You can check out what is happening around you on the news feed. As you play more and get better, the app will update your profile to represent your level.

How we built it

We built PickUp as a progressive web application optimized for mobile devices using the Ionic Framework that is based on Angular2. We integrated the authorization and database using Firebase's mBaaS. We also integrated the Google Maps API to mark existing courts and add the location of new courts.

Accomplishments that we're proud of

We created a seemless user experience around our app and achieved most of the things we set out to implement in the app. 

What's next for PickUp

The app is not finished yet, so we will continue working on it, in order to develop a stable version of our PickUp app and to extend it to other games, like Football and Cricket.
",,https://github.com/stevenabreu7/hackupc17,https://s3.amazonaws.com/challengepost/zip_files/production/25947/zip_files/hackupc17-master.zip,,"ionic, angular.js, typescript",Jacobs University Bremen,,,stevenabreu7,"Jacobs University, Jacobs University Bremen",2,AlexandruMaiereanu,TudorMaiereanu,,
#TrendingGallos,http://hackupc2017f.devpost.com/submissions/78781-trendinggallos,"Inspiration

Rap is the acronym for Rhythm And Poetry. We already know that Rap is urban poetry with music but, which is it´s digital equivalent? We think the answer is Twitter.

Rap verses are usually short but very powerful, just like tweets. Both are used for driving attention around delicate or problematic subject but also to express feelings or make laugh… anyway, no matter the subject, the goal is always the same: sharpen one´s wits in order to say so much with so little.

## What it does

#TrendingGallos is an app that recreates the epic “Batalla de los Gallos” (Battle of the Roosters -freestyle rap battles-) with Twitter conversations. 

It´s starts with a word you introduce, once you´ve registered and logged in with your Twitter acount. Then, when you click on the “Look for a fight” button, the app will suggest and show real tweets related with your word, as a rhymed answer to it. 

If you repeat it several times, you´ll generate your own “Batalla de Gallos” in the form of a Twitter thread, with the app as an opponent. You could save your battles and play their audios anytime you want.

How we built it

The project consists in two applications; an android mobile app and a nodeJS backend application.
The mobile app logs into Twitter to get its authentication and access the needed tweets. Once the user writes a word to rhyme, the app asks for rhymes to the application server. After that, it retrieves several tweets related with some of the rhyme words. We can create a chunk of tweets that rhyme by selecting them and saving into the mobile internal memory. 

Starting from that basis of cool tweets related to the rhymed content, we can dig into the next step: generating a rap-like related response automatically. Using all the tweets found, the platform get the key words of them and then selects the most relevant. Those keywords will be used to generate the rap-like response.

We have modelled 8 different rap retorical figure patterns inside the platform. Using those patterns, we generate some small pieces of text that are related to the original topic and also rhymes using a cool way. The system automatically generate and select the most suitable words, verbs and adjectives to fit with the main topics of the sentence.

The backend is developed in nodejs and integrates few vocabulary third parties API's. 
The platform has been deployed to an aruba IT infraestructure in Chech Republic.

Challenges we ran into

Coordinating several API was not easy (android asynchronous tasks are always a problem) and configuring Twitter authentication troubled a little at the beginning. The same for the backend, using a lot of nested API calls in order to find the right vocabulary, mess into a lot of programming stuff to manage Promises properly in a fast way.

Accomplishments that we're proud of

After a 36 hours hack, we've built something that works and it's funny to see it working. Just give it a try.

What we learned

We dig into android fundamentals like activities life-cycle, adapters and asynchronous task). Also, we have learned a lot in all stuff related to asynchronous calls and their well-made management.

What's next for #TrendingGallos

We had planned to integrate some extra API's in order to fit the audio to the base song and also to modify the singing pitch for certain emphasis words.
",,,https://s3.amazonaws.com/challengepost/zip_files/production/25948/zip_files/_TrendingGallos.pdf,"Amazon Web Services - Best Use of AWS, Best Domain Name from Domain.com","android, node.js, data-muse, sentencer, javascript, microsoft-cognitive, words-api",UPC,,,LauraBenitez,"Complot, Barcelona School Of Informatics",2,Oneone1,mapu77,,
Flocky,http://hackupc2017f.devpost.com/submissions/78782-flocky,"Inspiration

Frustration with current travel search as it always assumes that a group of travellers originates frm the same city. If  you and your travel mate hail from different cities most great features (price calendar, deal alerts) of Skyscanner, Google Flights and such become useless: you need to find options that are cheap for both of you. You can end up spending hours manually going through different dates and cities you can meet up in. 

What it does

It's a simple chatbot: it asks you for a pair of cities and sends you 2 itineraries: one from your city to the meetup city, another from you friend's city to the meetup city.

How I built it

I stand on the shoulders of 3 giants: Skyscanner API, Telegram bot API and an open-source library called Relayer that just so happens to have been written by me (for another project). The server that connects the three was written in Clojure.

Challenges I ran into

I was supposed to have a team but they disappeared into the cold Catalan night.

Accomplishments that I'm proud of

I love how simple the interface turned out to be. No nonsense, just a quick exchange with a bot.

What I learned


I have added Morse to my toolkit: it's a great Clojure library for Telegram bots.
I can't do 36 hours without sleep 
Finding teammates at the teambuilding event at the hackathon might not be such a good idea


What's next for Flocky

Better algorithms that pick up even lower prices. Filters that let you say why this option doesn't work for you (so that Flocky can offer you ones that do)
",,http://t.me/FlockySearchBot,,,"clojure, morse, telegram, skyscanner",Skolkovo Institute of Science and Technology,,,vadim0x60,Skolkovo Institute of Science and Technology,0,,,,
scanin,http://hackupc2017f.devpost.com/submissions/78783-scanin,"Inspiration

We want to make a web and mobile app that can scan the notes on a paper and produce a readable note for everyday use.

What it does

The project consist of an app that can translate and handwritten image into a digital note. This is supported by azure's cognitive engine.
The fun

How I built it

Challenges I ran into

Accomplishments that I'm proud of

What I learned

What's next for scanin
",,http://hack.victorpiella.com,,Itequia challenge,"azure, android, web, adobe-illustrator",jacobs University UPF UPC,,,NGetahun,Jacobs University,0,,,,
EyeMoveRobot,http://hackupc2017f.devpost.com/submissions/78790-eyemoverobot,"Inspiration

Controling objects with other parts of the body so you would not have to use your body. 
Working with object detection, image processing and in particular tracking eye movements.

What it was supposed to do

A mobile app that detected the users pupil and tracked the direction it is looking at, connected wirelessly with to the app is a robot that would move based on the direction of the users gaze.

How we built it

OpenCV image processing library, Arduino & Lego Mindstorm Robot and closer to the end of the hack Android Mobile Vision API

Challenges we ran into

Hardware and Software issues: including a defective WIFI chip, communication through each of the different software packages and detecting the pupil and the direction it is facing.

Accomplishments that we're proud of

Using OpenCV to Detect the Faces & Eyes, making a C# serial interface that sends the commands to the arduino and getting the results from the Android Vision API.

What we learned

Image Processing, Object Detection, Android Develpment

What's next for EyeMoveRobot

Being able to accurately detect the location of the pupil and the direction it is facing using OpenCV and using applying some machine learning 
",,https://github.com/Mdukes00/hackupcbot,,"Bloomberg challenge, Best IoT Hack Using a Qualcomm Device","c#, c, arduino, legomindstorm, asp.net",EASV,,,mdukes00,"easv, Business Acadamey Southwest, Esbjerg",2,hass123uk,isauraalmar,,
PogChat ,http://hackupc2017f.devpost.com/submissions/78792-pogchat,"It helps imaginBank clients, through a Python bot that communicates with the Telegram API through a php script.

It includes a set of functions:


Check balance
View last movements
View last incomes
View last spendings
View my credit cards
Check available promotions
Give money to another account
Withdraw money from an ATM
Asking for loans
Recharge phone funds
Check trusted accounts

",,https://github.com/Pablo-Ortiz-Lopez/PogChat,https://s3.amazonaws.com/challengepost/zip_files/production/25954/zip_files/PogChat.zip,imaginBank challenge,"php, python, apache, telegram, sqlite",UPC Barcelona,,,xavireyes999,UPC,1,pabloortiz132,,,
Gainz Pal,http://hackupc2017f.devpost.com/submissions/78794-gainz-pal,"Inspiration

We were frustrated with MyFitnessPal and we thought using machine learning would solve the problem.

What it does

How I built it

We trained a neural net with 101 food items with 100 000+ images.

Challenges I ran into

It was difficult to get a high enough confidence level which we solved by scraping additional images from sources like Flickr.
",,http://207.154.224.239,,,"python, tensorflow, flask","University of Toronto, University of Exeter, UPC",,,stanmalec,"Innopolis University, University of Exeter, Plymouth University",3,igor_shulgan,HarryBarnes,conor370,
Homenet,http://hackupc2017f.devpost.com/submissions/78797-homenet,"Inspiration

What it does

How I built it

Challenges I ran into

Accomplishments that I'm proud of

What I learned

What's next for Homenet

rftrvgt
",,,,,,UPC,,,24aitor,,0,,,,
